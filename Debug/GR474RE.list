
GR474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009930  08009930  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009938  08009938  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  20000184  08009ac4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001efc  08009ac4  00021efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185b5  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003647  00000000  00000000  00038769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028701  00000000  00000000  0003dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f8  00000000  00000000  000666e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3733  00000000  00000000  0007cce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  00170464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009890 	.word	0x08009890

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009890 	.word	0x08009890

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fd95 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f813 	bl	800054e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fa5e 	bl	80009e8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f85a 	bl	80005e4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000530:	f000 f89e 	bl	8000670 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000534:	f000 f8e2 	bl	80006fc <MX_FDCAN3_Init>
  MX_USB_Device_Init();
 8000538:	f008 fc98 	bl	8008e6c <MX_USB_Device_Init>
  MX_UART4_Init();
 800053c:	f000 f924 	bl	8000788 <MX_UART4_Init>
  MX_UART5_Init();
 8000540:	f000 f96e 	bl	8000820 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f9b8 	bl	80008b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000548:	f000 fa02 	bl	8000950 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x30>

0800054e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b094      	sub	sp, #80	; 0x50
 8000552:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	2238      	movs	r2, #56	; 0x38
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f009 f98f 	bl	8009880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000574:	f002 ff68 	bl	8003448 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	2303      	movs	r3, #3
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800058a:	2303      	movs	r3, #3
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 800058e:	236c      	movs	r3, #108	; 0x6c
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000596:	2306      	movs	r3, #6
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fff4 	bl	8003590 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005ae:	f000 fa63 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 faf8 	bl	8003bc0 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d6:	f000 fa4f 	bl	8000a78 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_FDCAN1_Init+0x84>)
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <MX_FDCAN1_Init+0x88>)
 80005ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_FDCAN1_Init+0x84>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_FDCAN1_Init+0x84>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_FDCAN1_Init+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000602:	2200      	movs	r2, #0
 8000604:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_FDCAN1_Init+0x84>)
 800060e:	2200      	movs	r2, #0
 8000610:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000614:	2210      	movs	r2, #16
 8000616:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_FDCAN1_Init+0x84>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000620:	2202      	movs	r2, #2
 8000622:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000626:	2202      	movs	r2, #2
 8000628:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_FDCAN1_Init+0x84>)
 800062c:	2201      	movs	r2, #1
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000632:	2201      	movs	r2, #1
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000638:	2201      	movs	r2, #1
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_FDCAN1_Init+0x84>)
 800063e:	2201      	movs	r2, #1
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_FDCAN1_Init+0x84>)
 800064a:	2200      	movs	r2, #0
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000650:	2200      	movs	r2, #0
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_FDCAN1_Init+0x84>)
 8000656:	f000 fe7b 	bl	8001350 <HAL_FDCAN_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000660:	f000 fa0a 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001a0 	.word	0x200001a0
 800066c:	40006400 	.word	0x40006400

08000670 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <MX_FDCAN2_Init+0x88>)
 8000678:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 800068e:	2200      	movs	r2, #0
 8000690:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 8000694:	2200      	movs	r2, #0
 8000696:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 800069a:	2200      	movs	r2, #0
 800069c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006ac:	2202      	movs	r2, #2
 80006ae:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006be:	2201      	movs	r2, #1
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006dc:	2200      	movs	r2, #0
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_FDCAN2_Init+0x84>)
 80006e2:	f000 fe35 	bl	8001350 <HAL_FDCAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80006ec:	f000 f9c4 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000204 	.word	0x20000204
 80006f8:	40006800 	.word	0x40006800

080006fc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_FDCAN3_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800071a:	2200      	movs	r2, #0
 800071c:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000720:	2200      	movs	r2, #0
 8000722:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000726:	2200      	movs	r2, #0
 8000728:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800072c:	2210      	movs	r2, #16
 800072e:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000732:	2201      	movs	r2, #1
 8000734:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000738:	2202      	movs	r2, #2
 800073a:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800073e:	2202      	movs	r2, #2
 8000740:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000744:	2201      	movs	r2, #1
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800074a:	2201      	movs	r2, #1
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000756:	2201      	movs	r2, #1
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000762:	2200      	movs	r2, #0
 8000764:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_FDCAN3_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_FDCAN3_Init+0x84>)
 800076e:	f000 fdef 	bl	8001350 <HAL_FDCAN_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000778:	f000 f97e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000268 	.word	0x20000268
 8000784:	40006c00 	.word	0x40006c00

08000788 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_UART4_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <MX_UART4_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_UART4_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_UART4_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_UART4_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_UART4_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_UART4_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_UART4_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_UART4_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_UART4_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_UART4_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_UART4_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <MX_UART4_Init+0x90>)
 80007d2:	f003 fe5f 	bl	8004494 <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f94c 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_UART4_Init+0x90>)
 80007e4:	f004 fb90 	bl	8004f08 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f943 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_UART4_Init+0x90>)
 80007f6:	f004 fbc5 	bl	8004f84 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f93a 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_UART4_Init+0x90>)
 8000806:	f004 fb46 	bl	8004e96 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f932 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200002cc 	.word	0x200002cc
 800081c:	40004c00 	.word	0x40004c00

08000820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_UART5_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_UART5_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_UART5_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_UART5_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_UART5_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_UART5_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_UART5_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_UART5_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_UART5_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_UART5_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_UART5_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_UART5_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_UART5_Init+0x90>)
 800086a:	f003 fe13 	bl	8004494 <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f900 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_UART5_Init+0x90>)
 800087c:	f004 fb44 	bl	8004f08 <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f8f7 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_UART5_Init+0x90>)
 800088e:	f004 fb79 	bl	8004f84 <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f8ee 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_UART5_Init+0x90>)
 800089e:	f004 fafa 	bl	8004e96 <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f8e6 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000035c 	.word	0x2000035c
 80008b4:	40005000 	.word	0x40005000

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_USART2_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000902:	f003 fdc7 	bl	8004494 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f8b4 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000914:	f004 faf8 	bl	8004f08 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f8ab 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000926:	f004 fb2d 	bl	8004f84 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f8a2 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000936:	f004 faae 	bl	8004e96 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f89a 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200003ec 	.word	0x200003ec
 800094c:	40004400 	.word	0x40004400

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART3_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800099a:	f003 fd7b 	bl	8004494 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f868 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ac:	f004 faac 	bl	8004f08 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f85f 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009be:	f004 fae1 	bl	8004f84 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f856 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f004 fa62 	bl	8004e96 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f84e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000047c 	.word	0x2000047c
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <MX_GPIO_Init+0x8c>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

}
 8000a66:	bf00      	nop
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	; 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0a2      	sub	sp, #136	; 0x88
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	2254      	movs	r2, #84	; 0x54
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fec7 	bl	8009880 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a70      	ldr	r2, [pc, #448]	; (8000cb8 <HAL_FDCAN_MspInit+0x1ec>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d144      	bne.n	8000b86 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b06:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fa73 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b18:	f7ff ffae 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b1c:	4b67      	ldr	r3, [pc, #412]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a66      	ldr	r2, [pc, #408]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000b24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b26:	4b65      	ldr	r3, [pc, #404]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d10b      	bne.n	8000b46 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b2e:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b5e      	ldr	r3, [pc, #376]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a5d      	ldr	r2, [pc, #372]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b5b      	ldr	r3, [pc, #364]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b72:	2309      	movs	r3, #9
 8000b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4851      	ldr	r0, [pc, #324]	; (8000cc4 <HAL_FDCAN_MspInit+0x1f8>)
 8000b80:	f000 fdac 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000b84:	e093      	b.n	8000cae <HAL_FDCAN_MspInit+0x1e2>
  else if(hfdcan->Instance==FDCAN2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a4f      	ldr	r2, [pc, #316]	; (8000cc8 <HAL_FDCAN_MspInit+0x1fc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d144      	bne.n	8000c1a <HAL_FDCAN_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b9a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fa29 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_FDCAN_MspInit+0xe4>
      Error_Handler();
 8000bac:	f7ff ff64 	bl	8000a78 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a41      	ldr	r2, [pc, #260]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bba:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10b      	bne.n	8000bda <HAL_FDCAN_MspInit+0x10e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	4a3e      	ldr	r2, [pc, #248]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bce:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bf2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bf6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000c06:	2309      	movs	r3, #9
 8000c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c10:	4619      	mov	r1, r3
 8000c12:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <HAL_FDCAN_MspInit+0x1f8>)
 8000c14:	f000 fd62 	bl	80016dc <HAL_GPIO_Init>
}
 8000c18:	e049      	b.n	8000cae <HAL_FDCAN_MspInit+0x1e2>
  else if(hfdcan->Instance==FDCAN3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <HAL_FDCAN_MspInit+0x200>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d144      	bne.n	8000cae <HAL_FDCAN_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c2e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 f9df 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_FDCAN_MspInit+0x178>
      Error_Handler();
 8000c40:	f7ff ff1a 	bl	8000a78 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000c4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_FDCAN_MspInit+0x1f0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10b      	bne.n	8000c6e <HAL_FDCAN_MspInit+0x1a2>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_FDCAN_MspInit+0x1f4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000c86:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c8a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f000 fd17 	bl	80016dc <HAL_GPIO_Init>
}
 8000cae:	bf00      	nop
 8000cb0:	3788      	adds	r7, #136	; 0x88
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40006400 	.word	0x40006400
 8000cbc:	2000050c 	.word	0x2000050c
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	40006800 	.word	0x40006800
 8000ccc:	40006c00 	.word	0x40006c00

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0a6      	sub	sp, #152	; 0x98
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cec:	2254      	movs	r2, #84	; 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fdc5 	bl	8009880 <memset>
  if(huart->Instance==UART4)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a95      	ldr	r2, [pc, #596]	; (8000f50 <HAL_UART_MspInit+0x280>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d13c      	bne.n	8000d7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d00:	2308      	movs	r3, #8
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 f973 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d18:	f7ff feae 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d1c:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	4a8c      	ldr	r2, [pc, #560]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d26:	6593      	str	r3, [r2, #88]	; 0x58
 8000d28:	4b8a      	ldr	r3, [pc, #552]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	4a86      	ldr	r2, [pc, #536]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d40:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000d66:	2305      	movs	r3, #5
 8000d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d70:	4619      	mov	r1, r3
 8000d72:	4879      	ldr	r0, [pc, #484]	; (8000f58 <HAL_UART_MspInit+0x288>)
 8000d74:	f000 fcb2 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d78:	e0e5      	b.n	8000f46 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==UART5)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a77      	ldr	r2, [pc, #476]	; (8000f5c <HAL_UART_MspInit+0x28c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d15d      	bne.n	8000e40 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d84:	2310      	movs	r3, #16
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 f931 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d9c:	f7ff fe6c 	bl	8000a78 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000da0:	4b6c      	ldr	r3, [pc, #432]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	4a6b      	ldr	r2, [pc, #428]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000daa:	6593      	str	r3, [r2, #88]	; 0x58
 8000dac:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	4b66      	ldr	r3, [pc, #408]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a65      	ldr	r2, [pc, #404]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b63      	ldr	r3, [pc, #396]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	623b      	str	r3, [r7, #32]
 8000dce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd0:	4b60      	ldr	r3, [pc, #384]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	4a5f      	ldr	r2, [pc, #380]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e02:	2305      	movs	r3, #5
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4852      	ldr	r0, [pc, #328]	; (8000f58 <HAL_UART_MspInit+0x288>)
 8000e10:	f000 fc64 	bl	80016dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e14:	2304      	movs	r3, #4
 8000e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e36:	4619      	mov	r1, r3
 8000e38:	4849      	ldr	r0, [pc, #292]	; (8000f60 <HAL_UART_MspInit+0x290>)
 8000e3a:	f000 fc4f 	bl	80016dc <HAL_GPIO_Init>
}
 8000e3e:	e082      	b.n	8000f46 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a47      	ldr	r2, [pc, #284]	; (8000f64 <HAL_UART_MspInit+0x294>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d13c      	bne.n	8000ec4 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 f8ce 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000e62:	f7ff fe09 	bl	8000a78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a34      	ldr	r2, [pc, #208]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e96:	230c      	movs	r3, #12
 8000e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f000 fc0d 	bl	80016dc <HAL_GPIO_Init>
}
 8000ec2:	e040      	b.n	8000f46 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_UART_MspInit+0x298>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d13b      	bne.n	8000f46 <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 f88c 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8000ee6:	f7ff fdc7 	bl	8000a78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x284>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <HAL_UART_MspInit+0x29c>)
 8000f42:	f000 fbcb 	bl	80016dc <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	3798      	adds	r7, #152	; 0x98
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004c00 	.word	0x40004c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	40005000 	.word	0x40005000
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	40004400 	.word	0x40004400
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	48000400 	.word	0x48000400

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f89a 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USB_LP_IRQHandler+0x10>)
 8000fca:	f000 fe10 	bl	8001bee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200019e8 	.word	0x200019e8

08000fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f008 fc05 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fa75 	bl	800051c <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   r0, =_estack
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001040:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8001044:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001048:	20001efc 	.word	0x20001efc

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f939 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	200f      	movs	r0, #15
 8001060:	f000 f80e 	bl	8001080 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fd08 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]

}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_InitTick+0x6c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f944 	bl	8001336 <HAL_SYSTICK_Config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10f      	bne.n	80010d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d809      	bhi.n	80010ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ba:	2200      	movs	r2, #0
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c2:	f000 f910 	bl	80012e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_InitTick+0x70>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e007      	b.n	80010de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e004      	b.n	80010de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x1c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	; (8001110 <HAL_IncTick+0x1c>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000510 	.word	0x20000510
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000510 	.word	0x20000510

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff40 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff33 	bl	8001194 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa4 	bl	800128c <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e147      	b.n	80015f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fba8 	bl	8000acc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0210 	bic.w	r2, r2, #16
 800138a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff fec4 	bl	8001118 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001392:	e012      	b.n	80013ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001394:	f7ff fec0 	bl	8001118 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b0a      	cmp	r3, #10
 80013a0:	d90b      	bls.n	80013ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e11b      	b.n	80015f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d0e5      	beq.n	8001394 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff fe9e 	bl	8001118 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013de:	e012      	b.n	8001406 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013e0:	f7ff fe9a 	bl	8001118 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d90b      	bls.n	8001406 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0f5      	b.n	80015f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0e5      	beq.n	80013e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0202 	orr.w	r2, r2, #2
 8001422:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a74      	ldr	r2, [pc, #464]	; (80015fc <HAL_FDCAN_Init+0x2ac>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d103      	bne.n	8001436 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800142e:	4a74      	ldr	r2, [pc, #464]	; (8001600 <HAL_FDCAN_Init+0x2b0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d108      	bne.n	8001450 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800144c:	619a      	str	r2, [r3, #24]
 800144e:	e007      	b.n	8001460 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800145e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7c5b      	ldrb	r3, [r3, #17]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	e007      	b.n	800148a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001488:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7c9b      	ldrb	r3, [r3, #18]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699a      	ldr	r2, [r3, #24]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014a0:	619a      	str	r2, [r3, #24]
 80014a2:	e007      	b.n	80014b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80014d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0210 	bic.w	r2, r2, #16
 80014e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	619a      	str	r2, [r3, #24]
 8001502:	e02c      	b.n	800155e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d028      	beq.n	800155e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d01c      	beq.n	800154e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001522:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0210 	orr.w	r2, r2, #16
 8001532:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d110      	bne.n	800155e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	e007      	b.n	800155e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	3b01      	subs	r3, #1
 8001564:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b01      	subs	r3, #1
 800156c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800156e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	3b01      	subs	r3, #1
 8001580:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001586:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001588:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001592:	d115      	bne.n	80015c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	3b01      	subs	r3, #1
 80015a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	3b01      	subs	r3, #1
 80015aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f814 	bl	8001604 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40006400 	.word	0x40006400
 8001600:	40006500 	.word	0x40006500

08001604 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800160e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d103      	bne.n	8001622 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001620:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d103      	bne.n	8001634 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001632:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001642:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	041a      	lsls	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001668:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	061a      	lsls	r2, r3, #24
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e005      	b.n	80016b6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3304      	adds	r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3f3      	bcc.n	80016aa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	4000a400 	.word	0x4000a400
 80016d4:	40006800 	.word	0x40006800
 80016d8:	40006c00 	.word	0x40006c00

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ea:	e15a      	b.n	80019a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 814c 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80a6 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6613      	str	r3, [r2, #96]	; 0x60
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001868:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d01f      	beq.n	80018d4 <HAL_GPIO_Init+0x1f8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_GPIO_Init+0x1f4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1f0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x2f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2fc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018bc:	2305      	movs	r3, #5
 80018be:	e00a      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c0:	2306      	movs	r3, #6
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x300>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x300>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x300>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x300>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f ae9d 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af06      	add	r7, sp, #24
 80019e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0d7      	b.n	8001ba2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f007 fc10 	bl	800922c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fb56 	bl	80050ca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e04c      	b.n	8001abe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3301      	adds	r3, #1
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	b298      	uxth	r0, r3
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3336      	adds	r3, #54	; 0x36
 8001a62:	4602      	mov	r2, r0
 8001a64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3303      	adds	r3, #3
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	3338      	adds	r3, #56	; 0x38
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	333c      	adds	r3, #60	; 0x3c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3340      	adds	r3, #64	; 0x40
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3ad      	bcc.n	8001a24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e044      	b.n	8001b58 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3b5      	bcc.n	8001ace <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	687e      	ldr	r6, [r7, #4]
 8001b6a:	466d      	mov	r5, sp
 8001b6c:	f106 0410 	add.w	r4, r6, #16
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	1d33      	adds	r3, r6, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f003 fabf 	bl	8005100 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f001 fc29 	bl	80033f2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001baa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_PCD_Start+0x16>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e012      	b.n	8001be6 <HAL_PCD_Start+0x3c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fa65 	bl	800509c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 fc7e 	bl	80074d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f005 fc83 	bl	8007506 <USB_ReadInterrupts>
 8001c00:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb26 	bl	800225e <PCD_EP_ISR_Handler>

    return;
 8001c12:	e110      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d013      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f007 fb89 	bl	800934e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8fc 	bl	8001e3c <HAL_PCD_SetAddress>

    return;
 8001c44:	e0f7      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c68:	e0e5      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c86:	b292      	uxth	r2, r2
 8001c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c8c:	e0d3      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d034      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	b292      	uxth	r2, r2
 8001cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f007 fd2b 	bl	8009738 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f007 fb6c 	bl	80093c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d00:	e099      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d027      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0208 	orr.w	r2, r2, #8
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0204 	orr.w	r2, r2, #4
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f007 fb19 	bl	800938c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d5a:	e06c      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d040      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12b      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0204 	orr.w	r2, r2, #4
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f007 fcad 	bl	8009738 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001dde:	e02a      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f007 fad3 	bl	800938c <HAL_PCD_SuspendCallback>
    return;
 8001de6:	e026      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f007 fa91 	bl	8009332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e10:	e011      	b.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e34:	bf00      	nop
  }
}
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_SetAddress+0x1a>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e013      	b.n	8001e7e <HAL_PCD_SetAddress+0x42>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fb1e 	bl	80074b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	4608      	mov	r0, r1
 8001e90:	4611      	mov	r1, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	4603      	mov	r3, r0
 8001e96:	70fb      	strb	r3, [r7, #3]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	803b      	strh	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da0e      	bge.n	8001eca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	705a      	strb	r2, [r3, #1]
 8001ec8:	e00e      	b.n	8001ee8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 0207 	and.w	r2, r3, #7
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ef4:	883a      	ldrh	r2, [r7, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	78ba      	ldrb	r2, [r7, #2]
 8001efe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f12:	78bb      	ldrb	r3, [r7, #2]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d102      	bne.n	8001f1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_PCD_EP_Open+0xa6>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e00e      	b.n	8001f4a <HAL_PCD_EP_Open+0xc4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f902 	bl	8005144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f48:	7afb      	ldrb	r3, [r7, #11]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da0e      	bge.n	8001f84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_EP_Close+0x6a>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e00e      	b.n	8001fda <HAL_PCD_EP_Close+0x88>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fc4e 	bl	800586c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	f003 0207 	and.w	r2, r3, #7
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2200      	movs	r2, #0
 8002020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	b2da      	uxtb	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fe01 	bl	8005c46 <USB_EPStartXfer>
 8002044:	e005      	b.n	8002052 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6979      	ldr	r1, [r7, #20]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fdfa 	bl	8005c46 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0207 	and.w	r2, r3, #7
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2201      	movs	r2, #1
 80020d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fda6 	bl	8005c46 <USB_EPStartXfer>
 80020fa:	e005      	b.n	8002108 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6979      	ldr	r1, [r7, #20]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fd9f 	bl	8005c46 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0207 	and.w	r2, r3, #7
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d901      	bls.n	8002130 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e03e      	b.n	80021ae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da0e      	bge.n	8002156 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	705a      	strb	r2, [r3, #1]
 8002154:	e00c      	b.n	8002170 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_PCD_EP_SetStall+0x7e>
 800218c:	2302      	movs	r3, #2
 800218e:	e00e      	b.n	80021ae <HAL_PCD_EP_SetStall+0x9c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 f887 	bl	80072b2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d901      	bls.n	80021d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e040      	b.n	8002256 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da0e      	bge.n	80021fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	705a      	strb	r2, [r3, #1]
 80021f8:	e00e      	b.n	8002218 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0207 	and.w	r2, r3, #7
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_PCD_EP_ClrStall+0x82>
 8002234:	2302      	movs	r3, #2
 8002236:	e00e      	b.n	8002256 <HAL_PCD_EP_ClrStall+0xa0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f005 f884 	bl	8007354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b096      	sub	sp, #88	; 0x58
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002266:	e39c      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002270:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002282:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 815e 	bne.w	8002548 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800228c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d150      	bne.n	800233a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a8:	81fb      	strh	r3, [r7, #14]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	89fb      	ldrh	r3, [r7, #14]
 80022b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3328      	adds	r3, #40	; 0x28
 80022c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	441a      	add	r2, r3
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f006 ffff 	bl	80092fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 834a 	beq.w	80029a2 <PCD_EP_ISR_Handler+0x744>
 800230e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8345 	bne.w	80029a2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b292      	uxth	r2, r2
 800232c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002338:	e333      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002340:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800234c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002354:	2b00      	cmp	r3, #0
 8002356:	d032      	beq.n	80023be <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002392:	b29b      	uxth	r3, r3
 8002394:	f005 f909 	bl	80075aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023a4:	4013      	ands	r3, r2
 80023a6:	823b      	strh	r3, [r7, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	8a3a      	ldrh	r2, [r7, #16]
 80023ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b2:	b292      	uxth	r2, r2
 80023b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f006 ff74 	bl	80092a4 <HAL_PCD_SetupStageCallback>
 80023bc:	e2f1      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023be:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f280 82ed 	bge.w	80029a2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023d4:	4013      	ands	r3, r2
 80023d6:	83fb      	strh	r3, [r7, #30]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	8bfa      	ldrh	r2, [r7, #30]
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	b292      	uxth	r2, r2
 80023e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <PCD_EP_ISR_Handler+0x1ec>
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002424:	6959      	ldr	r1, [r3, #20]
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800242e:	b29b      	uxth	r3, r3
 8002430:	f005 f8bb 	bl	80075aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	441a      	add	r2, r3
 800243e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002440:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002442:	2100      	movs	r1, #0
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 ff3f 	bl	80092c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 82a3 	bne.w	80029a2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b3e      	cmp	r3, #62	; 0x3e
 8002482:	d918      	bls.n	80024b6 <PCD_EP_ISR_Handler+0x258>
 8002484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <PCD_EP_ISR_Handler+0x240>
 8002498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249a:	3b01      	subs	r3, #1
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e029      	b.n	800250a <PCD_EP_ISR_Handler+0x2ac>
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d112      	bne.n	80024e4 <PCD_EP_ISR_Handler+0x286>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024dc:	b29a      	uxth	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	e012      	b.n	800250a <PCD_EP_ISR_Handler+0x2ac>
 80024e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	647b      	str	r3, [r7, #68]	; 0x44
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <PCD_EP_ISR_Handler+0x2a0>
 80024f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fa:	3301      	adds	r3, #1
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
 80024fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002500:	b29b      	uxth	r3, r3
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	b29a      	uxth	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	827b      	strh	r3, [r7, #18]
 800251c:	8a7b      	ldrh	r3, [r7, #18]
 800251e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002522:	827b      	strh	r3, [r7, #18]
 8002524:	8a7b      	ldrh	r3, [r7, #18]
 8002526:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800252a:	827b      	strh	r3, [r7, #18]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	8a7b      	ldrh	r3, [r7, #18]
 8002532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800253a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002542:	b29b      	uxth	r3, r3
 8002544:	8013      	strh	r3, [r2, #0]
 8002546:	e22c      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800255c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002560:	2b00      	cmp	r3, #0
 8002562:	f280 80f6 	bge.w	8002752 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	f640 738f 	movw	r3, #3983	; 0xf8f
 800257c:	4013      	ands	r3, r2
 800257e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002598:	b292      	uxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800259c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b4:	7b1b      	ldrb	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d123      	bne.n	8002602 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80025e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 808e 	beq.w	8002708 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f2:	6959      	ldr	r1, [r3, #20]
 80025f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f6:	88da      	ldrh	r2, [r3, #6]
 80025f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025fc:	f004 ffd5 	bl	80075aa <USB_ReadPMA>
 8002600:	e082      	b.n	8002708 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002604:	78db      	ldrb	r3, [r3, #3]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d10a      	bne.n	8002620 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800260a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800260e:	461a      	mov	r2, r3
 8002610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f9d3 	bl	80029be <HAL_PCD_EP_DB_Receive>
 8002618:	4603      	mov	r3, r0
 800261a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800261e:	e073      	b.n	8002708 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	441a      	add	r2, r3
 800264c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002660:	b29b      	uxth	r3, r3
 8002662:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d022      	beq.n	80026c4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4413      	add	r3, r2
 8002698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80026a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d02c      	beq.n	8002708 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b4:	6959      	ldr	r1, [r3, #20]
 80026b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b8:	891a      	ldrh	r2, [r3, #8]
 80026ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026be:	f004 ff74 	bl	80075aa <USB_ReadPMA>
 80026c2:	e021      	b.n	8002708 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80026ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fe:	895a      	ldrh	r2, [r3, #10]
 8002700:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002704:	f004 ff51 	bl	80075aa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002710:	441a      	add	r2, r3
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800271e:	441a      	add	r2, r3
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002722:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <PCD_EP_ISR_Handler+0x4da>
 800272c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d206      	bcs.n	8002746 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f006 fdc2 	bl	80092c8 <HAL_PCD_DataOutStageCallback>
 8002744:	e005      	b.n	8002752 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fa7a 	bl	8005c46 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002752:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8121 	beq.w	80029a2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002760:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	441a      	add	r2, r3
 80027a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f000 80a2 	beq.w	80028fe <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	7b1b      	ldrb	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8093 	beq.w	80028f0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d046      	beq.n	8002864 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	785b      	ldrb	r3, [r3, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d126      	bne.n	800282c <PCD_EP_ISR_Handler+0x5ce>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	4413      	add	r3, r2
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	4413      	add	r3, r2
 8002800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002810:	b29a      	uxth	r2, r3
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002824:	b29a      	uxth	r2, r3
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e061      	b.n	80028f0 <PCD_EP_ISR_Handler+0x692>
 800282c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d15d      	bne.n	80028f0 <PCD_EP_ISR_Handler+0x692>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	4413      	add	r3, r2
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00da      	lsls	r2, r3, #3
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	4413      	add	r3, r2
 8002856:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	e045      	b.n	80028f0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <PCD_EP_ISR_Handler+0x662>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	4413      	add	r3, r2
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
 800288a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00da      	lsls	r2, r3, #3
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	4413      	add	r3, r2
 8002894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e017      	b.n	80028f0 <PCD_EP_ISR_Handler+0x692>
 80028c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d113      	bne.n	80028f0 <PCD_EP_ISR_Handler+0x692>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	4413      	add	r3, r2
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	2200      	movs	r2, #0
 80028ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f006 fd01 	bl	80092fe <HAL_PCD_DataInStageCallback>
 80028fc:	e051      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d144      	bne.n	8002994 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4413      	add	r3, r2
 8002924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800293a:	429a      	cmp	r2, r3
 800293c:	d907      	bls.n	800294e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294a:	619a      	str	r2, [r3, #24]
 800294c:	e002      	b.n	8002954 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 fccb 	bl	80092fe <HAL_PCD_DataInStageCallback>
 8002968:	e01b      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800296a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002972:	441a      	add	r2, r3
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002980:	441a      	add	r2, r3
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f95a 	bl	8005c46 <USB_EPStartXfer>
 8002992:	e006      	b.n	80029a2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002994:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002998:	461a      	mov	r2, r3
 800299a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f917 	bl	8002bd0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f6ff ac5a 	blt.w	8002268 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3758      	adds	r7, #88	; 0x58
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d07c      	beq.n	8002ad0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	8b7b      	ldrh	r3, [r7, #26]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d306      	bcc.n	8002a14 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	8b7b      	ldrh	r3, [r7, #26]
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	619a      	str	r2, [r3, #24]
 8002a12:	e002      	b.n	8002a1a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d123      	bne.n	8002a6a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3c:	833b      	strh	r3, [r7, #24]
 8002a3e:	8b3b      	ldrh	r3, [r7, #24]
 8002a40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a44:	833b      	strh	r3, [r7, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	8b3b      	ldrh	r3, [r7, #24]
 8002a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01f      	beq.n	8002ab4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	82fb      	strh	r3, [r7, #22]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8085 	beq.w	8002bc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6959      	ldr	r1, [r3, #20]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	891a      	ldrh	r2, [r3, #8]
 8002ac8:	8b7b      	ldrh	r3, [r7, #26]
 8002aca:	f004 fd6e 	bl	80075aa <USB_ReadPMA>
 8002ace:	e07a      	b.n	8002bc6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d306      	bcc.n	8002b0e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	8b7b      	ldrh	r3, [r7, #26]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	619a      	str	r2, [r3, #24]
 8002b0c:	e002      	b.n	8002b14 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d123      	bne.n	8002b64 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	83fb      	strh	r3, [r7, #30]
 8002b38:	8bfb      	ldrh	r3, [r7, #30]
 8002b3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b3e:	83fb      	strh	r3, [r7, #30]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	8bfb      	ldrh	r3, [r7, #30]
 8002b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11f      	bne.n	8002bae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	83bb      	strh	r3, [r7, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	8bbb      	ldrh	r3, [r7, #28]
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bae:	8b7b      	ldrh	r3, [r7, #26]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6959      	ldr	r1, [r3, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	895a      	ldrh	r2, [r3, #10]
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	f004 fcf2 	bl	80075aa <USB_ReadPMA>
    }
  }

  return count;
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0a2      	sub	sp, #136	; 0x88
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 81c5 	beq.w	8002f74 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d907      	bls.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	e002      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80b9 	bne.w	8002db0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d126      	bne.n	8002c94 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	4413      	add	r3, r2
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	00da      	lsls	r2, r3, #3
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	4413      	add	r3, r2
 8002c68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	e01a      	b.n	8002cca <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d116      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	4413      	add	r3, r2
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00da      	lsls	r2, r3, #3
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d126      	bne.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x156>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00da      	lsls	r2, r3, #3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	e017      	b.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d113      	bne.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	00da      	lsls	r2, r3, #3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2200      	movs	r2, #0
 8002d54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f006 face 	bl	80092fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 82d2 	beq.w	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d88:	827b      	strh	r3, [r7, #18]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	8a7b      	ldrh	r3, [r7, #18]
 8002d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	8013      	strh	r3, [r2, #0]
 8002dae:	e2b0      	b.n	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d021      	beq.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 8284 	bne.w	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e12:	441a      	add	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e20:	441a      	add	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d309      	bcc.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	621a      	str	r2, [r3, #32]
 8002e44:	e015      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e5c:	e009      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d155      	bne.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x356>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	4413      	add	r3, r2
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	00da      	lsls	r2, r3, #3
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ea6:	d916      	bls.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x306>
 8002ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	029b      	lsls	r3, r3, #10
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e043      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x332>
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e02d      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x348>
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	3301      	adds	r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	e01b      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d117      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	4413      	add	r3, r2
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	891a      	ldrh	r2, [r3, #8]
 8002f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f004 fada 	bl	8007526 <USB_WritePMA>
 8002f72:	e1ce      	b.n	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d307      	bcc.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb0:	1ad2      	subs	r2, r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	619a      	str	r2, [r3, #24]
 8002fb6:	e002      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 80c4 	bne.w	8003150 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d126      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x44e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe4:	4413      	add	r3, r2
 8002fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	00da      	lsls	r2, r3, #3
 8002fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003002:	b29a      	uxth	r2, r3
 8003004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003016:	b29a      	uxth	r2, r3
 8003018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	e01a      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x484>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d116      	bne.n	8003054 <HAL_PCD_EP_DB_Transmit+0x484>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800303a:	4413      	add	r3, r2
 800303c:	673b      	str	r3, [r7, #112]	; 0x70
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003046:	4413      	add	r3, r2
 8003048:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800304c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	2200      	movs	r2, #0
 8003052:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	67fb      	str	r3, [r7, #124]	; 0x7c
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d12f      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800307a:	4413      	add	r3, r2
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	00da      	lsls	r2, r3, #3
 8003086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308a:	4413      	add	r3, r2
 800308c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e017      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x522>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d113      	bne.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x522>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d8:	4413      	add	r3, r2
 80030da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	00da      	lsls	r2, r3, #3
 80030e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e4:	4413      	add	r3, r2
 80030e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ee:	2200      	movs	r2, #0
 80030f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f006 f900 	bl	80092fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 8104 	bne.w	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800313a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]
 800314e:	e0e0      	b.n	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003174:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800318a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 80b4 	bne.w	8003312 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b2:	441a      	add	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c0:	441a      	add	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d309      	bcc.n	80031e6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	621a      	str	r2, [r3, #32]
 80031e4:	e015      	b.n	8003212 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80031ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031fc:	e009      	b.n	8003212 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	663b      	str	r3, [r7, #96]	; 0x60
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d155      	bne.n	80032cc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	65bb      	str	r3, [r7, #88]	; 0x58
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003234:	4413      	add	r3, r2
 8003236:	65bb      	str	r3, [r7, #88]	; 0x58
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00da      	lsls	r2, r3, #3
 800323e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003240:	4413      	add	r3, r2
 8003242:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003246:	657b      	str	r3, [r7, #84]	; 0x54
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	2b3e      	cmp	r3, #62	; 0x3e
 800324c:	d916      	bls.n	800327c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	677b      	str	r3, [r7, #116]	; 0x74
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_PCD_EP_DB_Transmit+0x694>
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	3b01      	subs	r3, #1
 8003262:	677b      	str	r3, [r7, #116]	; 0x74
 8003264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003266:	b29b      	uxth	r3, r3
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	b29b      	uxth	r3, r3
 800326c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003274:	b29a      	uxth	r2, r3
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	e040      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x72e>
 800327c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800328c:	b29a      	uxth	r2, r3
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800329c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	e02a      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80032a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	677b      	str	r3, [r7, #116]	; 0x74
 80032ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_PCD_EP_DB_Transmit+0x6ee>
 80032b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ba:	3301      	adds	r3, #1
 80032bc:	677b      	str	r3, [r7, #116]	; 0x74
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	e018      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d114      	bne.n	80032fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e2:	4413      	add	r3, r2
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ee:	4413      	add	r3, r2
 80032f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6959      	ldr	r1, [r3, #20]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	895a      	ldrh	r2, [r3, #10]
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	b29b      	uxth	r3, r3
 800330e:	f004 f90a 	bl	8007526 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332c:	823b      	strh	r3, [r7, #16]
 800332e:	8a3b      	ldrh	r3, [r7, #16]
 8003330:	f083 0310 	eor.w	r3, r3, #16
 8003334:	823b      	strh	r3, [r7, #16]
 8003336:	8a3b      	ldrh	r3, [r7, #16]
 8003338:	f083 0320 	eor.w	r3, r3, #32
 800333c:	823b      	strh	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8a3b      	ldrh	r3, [r7, #16]
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3788      	adds	r7, #136	; 0x88
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	4613      	mov	r3, r2
 800337c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e009      	b.n	80033b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a2:	897a      	ldrh	r2, [r7, #10]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	80da      	strh	r2, [r3, #6]
 80033ca:	e00b      	b.n	80033e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2201      	movs	r2, #1
 80033d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	b29a      	uxth	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003416:	b29b      	uxth	r3, r3
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800342a:	b29b      	uxth	r3, r3
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d141      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d131      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003464:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346a:	4a46      	ldr	r2, [pc, #280]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347c:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2232      	movs	r2, #50	; 0x32
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a3f      	ldr	r2, [pc, #252]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349a:	e002      	b.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d102      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d158      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e057      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034d8:	e04d      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d141      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d131      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	4a23      	ldr	r2, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2232      	movs	r2, #50	; 0x32
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003526:	e002      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b01      	subs	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d102      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d112      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e011      	b.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003564:	e007      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003574:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40007000 	.word	0x40007000
 8003588:	20000000 	.word	0x20000000
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e306      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d075      	beq.n	800369a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ae:	4b97      	ldr	r3, [pc, #604]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_OscConfig+0x3e>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_OscConfig+0x44>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d10b      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	4b8d      	ldr	r3, [pc, #564]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05b      	beq.n	8003698 <HAL_RCC_OscConfig+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d157      	bne.n	8003698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e2e1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x74>
 80035f6:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a84      	ldr	r2, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003628:	4b78      	ldr	r3, [pc, #480]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a77      	ldr	r2, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b75      	ldr	r3, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a74      	ldr	r2, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fd66 	bl	8001118 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fd62 	bl	8001118 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2a6      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xc0>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fd52 	bl	8001118 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd fd4e 	bl	8001118 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e292      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368a:	4b60      	ldr	r3, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0xe8>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d075      	beq.n	8003792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d102      	bne.n	80036c6 <HAL_RCC_OscConfig+0x136>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_OscConfig+0x13c>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11f      	bne.n	800370c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x154>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e265      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	4946      	ldr	r1, [pc, #280]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <HAL_RCC_OscConfig+0x280>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fcbf 	bl	8001080 <HAL_InitTick>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d043      	beq.n	8003790 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e251      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3c      	ldr	r2, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fcfa 	bl	8001118 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003728:	f7fd fcf6 	bl	8001118 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e23a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	492d      	ldr	r1, [pc, #180]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 800375a:	e01a      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd fcd6 	bl	8001118 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fd fcd2 	bl	8001118 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e216      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x1e0>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d041      	beq.n	8003822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fd fcaf 	bl	8001118 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037be:	f7fd fcab 	bl	8001118 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1ef      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ef      	beq.n	80037be <HAL_RCC_OscConfig+0x22e>
 80037de:	e020      	b.n	8003822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd fc92 	bl	8001118 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f6:	e00d      	b.n	8003814 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd fc8e 	bl	8001118 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d906      	bls.n	8003814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1d2      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003814:	4b8c      	ldr	r3, [pc, #560]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ea      	bne.n	80037f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a6 	beq.w	800397c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_OscConfig+0x2b4>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x2b6>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	4a7e      	ldr	r2, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6593      	str	r3, [r2, #88]	; 0x58
 8003856:	4b7c      	ldr	r3, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b79      	ldr	r3, [pc, #484]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fd fc4b 	bl	8001118 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fd fc47 	bl	8001118 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e18b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x4bc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d108      	bne.n	80038be <HAL_RCC_OscConfig+0x32e>
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a65      	ldr	r2, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038bc:	e024      	b.n	8003908 <HAL_RCC_OscConfig+0x378>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d110      	bne.n	80038e8 <HAL_RCC_OscConfig+0x358>
 80038c6:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x378>
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fc02 	bl	8001118 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fbfe 	bl	8001118 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e140      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392e:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ed      	beq.n	8003918 <HAL_RCC_OscConfig+0x388>
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fbeb 	bl	8001118 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fbe7 	bl	8001118 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e129      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ed      	bne.n	8003946 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d03c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01c      	beq.n	80039ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003996:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fbba 	bl	8001118 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a8:	f7fd fbb6 	bl	8001118 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0fa      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <HAL_RCC_OscConfig+0x418>
 80039c8:	e01b      	b.n	8003a02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fd fb9d 	bl	8001118 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e2:	f7fd fb99 	bl	8001118 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0dd      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ef      	bne.n	80039e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d1 	beq.w	8003bae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f000 808b 	beq.w	8003b30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d15e      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_RCC_OscConfig+0x4b8>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fb73 	bl	8001118 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e00c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd fb6f 	bl	8001118 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d905      	bls.n	8003a50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0b3      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ec      	bne.n	8003a36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x62c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a11      	ldr	r1, [r2, #32]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a76:	0212      	lsls	r2, r2, #8
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0552      	lsls	r2, r2, #21
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a96:	06d2      	lsls	r2, r2, #27
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a44      	ldr	r2, [pc, #272]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fb2e 	bl	8001118 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd fb2a 	bl	8001118 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e06e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x530>
 8003ade:	e066      	b.n	8003bae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003afe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fb06 	bl	8001118 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fb02 	bl	8001118 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e046      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b22:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x580>
 8003b2e:	e03e      	b.n	8003bae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e039      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_OscConfig+0x628>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d12c      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d123      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d11b      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d113      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	019f800c 	.word	0x019f800c

08003bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e11e      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d910      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 020f 	bic.w	r2, r3, #15
 8003bee:	498c      	ldr	r1, [pc, #560]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e106      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d073      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d129      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1c:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0f4      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c2c:	f000 f99e 	bl	8003f6c <RCC_GetSysClockFreqFromPLLSource>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_RCC_ClockConfig+0x268>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d93f      	bls.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d033      	beq.n	8003cba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d12f      	bne.n	8003cba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c5a:	4b72      	ldr	r3, [pc, #456]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c62:	4a70      	ldr	r2, [pc, #448]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e024      	b.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0c6      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0be      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c98:	f000 f8ce 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a61      	ldr	r2, [pc, #388]	; (8003e28 <HAL_RCC_ClockConfig+0x268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d909      	bls.n	8003cba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	4a5d      	ldr	r2, [pc, #372]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4957      	ldr	r1, [pc, #348]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fd fa24 	bl	8001118 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7fd fa20 	bl	8001118 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e095      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a42      	ldr	r2, [pc, #264]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d34:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4936      	ldr	r1, [pc, #216]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d105      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d56:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d62:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d21d      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 020f 	bic.w	r2, r3, #15
 8003d78:	4929      	ldr	r1, [pc, #164]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d80:	f7fd f9ca 	bl	8001118 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fd f9c6 	bl	8001118 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03b      	b.n	8003e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1ed      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4917      	ldr	r1, [pc, #92]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490f      	ldr	r1, [pc, #60]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dea:	f000 f825 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_ClockConfig+0x264>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490c      	ldr	r1, [pc, #48]	; (8003e2c <HAL_RCC_ClockConfig+0x26c>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x270>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f936 	bl	8001080 <HAL_InitTick>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	04c4b400 	.word	0x04c4b400
 8003e2c:	080098f0 	.word	0x080098f0
 8003e30:	20000000 	.word	0x20000000
 8003e34:	20000004 	.word	0x20000004

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e047      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e03e      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d136      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3301      	adds	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e96:	68d2      	ldr	r2, [r2, #12]
 8003e98:	0a12      	lsrs	r2, r2, #8
 8003e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	617b      	str	r3, [r7, #20]
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	0a12      	lsrs	r2, r2, #8
 8003eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0e5b      	lsrs	r3, r3, #25
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e001      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ee0:	693b      	ldr	r3, [r7, #16]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	00f42400 	.word	0x00f42400
 8003ef8:	007a1200 	.word	0x007a1200

08003efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000000 	.word	0x20000000

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f18:	f7ff fff0 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08009900 	.word	0x08009900

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f44:	f7ff ffda 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08009900 	.word	0x08009900

08003f6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d10c      	bne.n	8003faa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f9a:	68d2      	ldr	r2, [r2, #12]
 8003f9c:	0a12      	lsrs	r2, r2, #8
 8003f9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
    break;
 8003fa8:	e00c      	b.n	8003fc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	0a12      	lsrs	r2, r2, #8
 8003fb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
    break;
 8003fc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0e5b      	lsrs	r3, r3, #25
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fde:	687b      	ldr	r3, [r7, #4]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	007a1200 	.word	0x007a1200
 8003ff4:	00f42400 	.word	0x00f42400

08003ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004000:	2300      	movs	r3, #0
 8004002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004004:	2300      	movs	r3, #0
 8004006:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8098 	beq.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a39      	ldr	r2, [pc, #228]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404e:	f7fd f863 	bl	8001118 <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004054:	e009      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd f85f 	bl	8001118 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	74fb      	strb	r3, [r7, #19]
        break;
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ef      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d159      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407c:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	d019      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd f81f 	bl	8001118 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd f81b 	bl	8001118 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d902      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	74fb      	strb	r3, [r7, #19]
            break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ec      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	74bb      	strb	r3, [r7, #18]
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004134:	7c7b      	ldrb	r3, [r7, #17]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413a:	4ba7      	ldr	r3, [pc, #668]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	4aa6      	ldr	r2, [pc, #664]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004152:	4ba1      	ldr	r3, [pc, #644]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 0203 	bic.w	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	499d      	ldr	r1, [pc, #628]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004174:	4b98      	ldr	r3, [pc, #608]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 020c 	bic.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4995      	ldr	r1, [pc, #596]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004196:	4b90      	ldr	r3, [pc, #576]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	498c      	ldr	r1, [pc, #560]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b8:	4b87      	ldr	r3, [pc, #540]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4984      	ldr	r1, [pc, #528]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041da:	4b7f      	ldr	r3, [pc, #508]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	497b      	ldr	r1, [pc, #492]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041fc:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	4973      	ldr	r1, [pc, #460]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421e:	4b6e      	ldr	r3, [pc, #440]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	496a      	ldr	r1, [pc, #424]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004240:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4962      	ldr	r1, [pc, #392]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004262:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	4959      	ldr	r1, [pc, #356]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004284:	4b54      	ldr	r3, [pc, #336]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	4951      	ldr	r1, [pc, #324]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a6:	4b4c      	ldr	r3, [pc, #304]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4948      	ldr	r1, [pc, #288]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4940      	ldr	r1, [pc, #256]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	4932      	ldr	r1, [pc, #200]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	4924      	ldr	r1, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004362:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	4916      	ldr	r1, [pc, #88]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d019      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4908      	ldr	r1, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c6:	d109      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a02      	ldr	r2, [pc, #8]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4926      	ldr	r1, [pc, #152]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	4918      	ldr	r1, [pc, #96]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d015      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800445a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004482:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004484:	7cbb      	ldrb	r3, [r7, #18]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e042      	b.n	800452c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fc09 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	; 0x24
 80044c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f82c 	bl	8004534 <UART_SetConfig>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e022      	b.n	800452c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb1c 	bl	8004b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fba3 	bl	8004c70 <UART_CheckIdleState>
 800452a:	4603      	mov	r3, r0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b08c      	sub	sp, #48	; 0x30
 800453a:	af00      	add	r7, sp, #0
 800453c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4baa      	ldr	r3, [pc, #680]	; (800480c <UART_SetConfig+0x2d8>)
 8004564:	4013      	ands	r3, r2
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a9f      	ldr	r2, [pc, #636]	; (8004810 <UART_SetConfig+0x2dc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459c:	4313      	orrs	r3, r2
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f023 010f 	bic.w	r1, r3, #15
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a90      	ldr	r2, [pc, #576]	; (8004814 <UART_SetConfig+0x2e0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d125      	bne.n	8004624 <UART_SetConfig+0xf0>
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <UART_SetConfig+0x2e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d81a      	bhi.n	800461c <UART_SetConfig+0xe8>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0xb8>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004615 	.word	0x08004615
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004602:	e116      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460a:	e112      	b.n	8004832 <UART_SetConfig+0x2fe>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e10e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e10a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e106      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7c      	ldr	r2, [pc, #496]	; (800481c <UART_SetConfig+0x2e8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d138      	bne.n	80046a0 <UART_SetConfig+0x16c>
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <UART_SetConfig+0x2e4>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d82d      	bhi.n	8004698 <UART_SetConfig+0x164>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x110>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	08004699 	.word	0x08004699
 800464c:	08004699 	.word	0x08004699
 8004650:	08004699 	.word	0x08004699
 8004654:	08004689 	.word	0x08004689
 8004658:	08004699 	.word	0x08004699
 800465c:	08004699 	.word	0x08004699
 8004660:	08004699 	.word	0x08004699
 8004664:	08004681 	.word	0x08004681
 8004668:	08004699 	.word	0x08004699
 800466c:	08004699 	.word	0x08004699
 8004670:	08004699 	.word	0x08004699
 8004674:	08004691 	.word	0x08004691
 8004678:	2300      	movs	r3, #0
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e0d8      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e0d4      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e0d0      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004696:	e0cc      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e0c8      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5e      	ldr	r2, [pc, #376]	; (8004820 <UART_SetConfig+0x2ec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d125      	bne.n	80046f6 <UART_SetConfig+0x1c2>
 80046aa:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <UART_SetConfig+0x2e4>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d016      	beq.n	80046e6 <UART_SetConfig+0x1b2>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d818      	bhi.n	80046ee <UART_SetConfig+0x1ba>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d00a      	beq.n	80046d6 <UART_SetConfig+0x1a2>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d814      	bhi.n	80046ee <UART_SetConfig+0x1ba>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0x19a>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d008      	beq.n	80046de <UART_SetConfig+0x1aa>
 80046cc:	e00f      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d4:	e0ad      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046dc:	e0a9      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046de:	2304      	movs	r3, #4
 80046e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e4:	e0a5      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046e6:	2308      	movs	r3, #8
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ec:	e0a1      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046ee:	2310      	movs	r3, #16
 80046f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f4:	e09d      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <UART_SetConfig+0x2f0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d125      	bne.n	800474c <UART_SetConfig+0x218>
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <UART_SetConfig+0x2e4>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470a:	2bc0      	cmp	r3, #192	; 0xc0
 800470c:	d016      	beq.n	800473c <UART_SetConfig+0x208>
 800470e:	2bc0      	cmp	r3, #192	; 0xc0
 8004710:	d818      	bhi.n	8004744 <UART_SetConfig+0x210>
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d00a      	beq.n	800472c <UART_SetConfig+0x1f8>
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d814      	bhi.n	8004744 <UART_SetConfig+0x210>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <UART_SetConfig+0x1f0>
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x200>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x210>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472a:	e082      	b.n	8004832 <UART_SetConfig+0x2fe>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e07e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e07a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e076      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e072      	b.n	8004832 <UART_SetConfig+0x2fe>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <UART_SetConfig+0x2f4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12a      	bne.n	80047ac <UART_SetConfig+0x278>
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <UART_SetConfig+0x2e4>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d01a      	beq.n	800479c <UART_SetConfig+0x268>
 8004766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0x270>
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d00c      	beq.n	800478c <UART_SetConfig+0x258>
 8004772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004776:	d815      	bhi.n	80047a4 <UART_SetConfig+0x270>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x250>
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x260>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x270>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478a:	e052      	b.n	8004832 <UART_SetConfig+0x2fe>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004792:	e04e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479a:	e04a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e046      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e042      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <UART_SetConfig+0x2dc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d13a      	bne.n	800482c <UART_SetConfig+0x2f8>
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <UART_SetConfig+0x2e4>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c4:	d01a      	beq.n	80047fc <UART_SetConfig+0x2c8>
 80047c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ca:	d81b      	bhi.n	8004804 <UART_SetConfig+0x2d0>
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d00c      	beq.n	80047ec <UART_SetConfig+0x2b8>
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d815      	bhi.n	8004804 <UART_SetConfig+0x2d0>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x2b0>
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x2c0>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x2d0>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e022      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e01e      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e01a      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e016      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x2fe>
 800480c:	cfff69f3 	.word	0xcfff69f3
 8004810:	40008000 	.word	0x40008000
 8004814:	40013800 	.word	0x40013800
 8004818:	40021000 	.word	0x40021000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40004c00 	.word	0x40004c00
 8004828:	40005000 	.word	0x40005000
 800482c:	2310      	movs	r3, #16
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4aae      	ldr	r2, [pc, #696]	; (8004af0 <UART_SetConfig+0x5bc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 8097 	bne.w	800496c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800483e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004842:	2b08      	cmp	r3, #8
 8004844:	d823      	bhi.n	800488e <UART_SetConfig+0x35a>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x318>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004871 	.word	0x08004871
 8004850:	0800488f 	.word	0x0800488f
 8004854:	08004879 	.word	0x08004879
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800487f 	.word	0x0800487f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800488f 	.word	0x0800488f
 800486c:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7ff fb50 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b9e      	ldr	r3, [pc, #632]	; (8004af4 <UART_SetConfig+0x5c0>)
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7ff fadb 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004884:	e009      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800488c:	e005      	b.n	800489a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8130 	beq.w	8004b02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	4a94      	ldr	r2, [pc, #592]	; (8004af8 <UART_SetConfig+0x5c4>)
 80048a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d305      	bcc.n	80048d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d903      	bls.n	80048da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048d8:	e113      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2200      	movs	r2, #0
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	60fa      	str	r2, [r7, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	4a84      	ldr	r2, [pc, #528]	; (8004af8 <UART_SetConfig+0x5c4>)
 80048e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048fc:	f7fb fc8c 	bl	8000218 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	020b      	lsls	r3, r1, #8
 8004912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004916:	0202      	lsls	r2, r0, #8
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	0849      	lsrs	r1, r1, #1
 800491e:	2000      	movs	r0, #0
 8004920:	460c      	mov	r4, r1
 8004922:	4605      	mov	r5, r0
 8004924:	eb12 0804 	adds.w	r8, r2, r4
 8004928:	eb43 0905 	adc.w	r9, r3, r5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	469a      	mov	sl, r3
 8004934:	4693      	mov	fp, r2
 8004936:	4652      	mov	r2, sl
 8004938:	465b      	mov	r3, fp
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fb fc6b 	bl	8000218 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4613      	mov	r3, r2
 8004948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d308      	bcc.n	8004964 <UART_SetConfig+0x430>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d204      	bcs.n	8004964 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e0ce      	b.n	8004b02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800496a:	e0ca      	b.n	8004b02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d166      	bne.n	8004a44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800497a:	2b08      	cmp	r3, #8
 800497c:	d827      	bhi.n	80049ce <UART_SetConfig+0x49a>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x450>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7ff fab4 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7ff fac6 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4e      	ldr	r3, [pc, #312]	; (8004af4 <UART_SetConfig+0x5c0>)
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7ff fa3b 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 80049c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8090 	beq.w	8004b02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	4a44      	ldr	r2, [pc, #272]	; (8004af8 <UART_SetConfig+0x5c4>)
 80049e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f4:	005a      	lsls	r2, r3, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	441a      	add	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d916      	bls.n	8004a3c <UART_SetConfig+0x508>
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d212      	bcs.n	8004a3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f023 030f 	bic.w	r3, r3, #15
 8004a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	8bfb      	ldrh	r3, [r7, #30]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	8bfa      	ldrh	r2, [r7, #30]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	e062      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a42:	e05e      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x56a>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x520>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7ff fa4c 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a7e:	e014      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7ff fa5e 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a86:	e010      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <UART_SetConfig+0x5c0>)
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a8c:	e00d      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7ff f9d3 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a94:	e009      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a9c:	e005      	b.n	8004aaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d028      	beq.n	8004b02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <UART_SetConfig+0x5c4>)
 8004ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	441a      	add	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b0f      	cmp	r3, #15
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x5c8>
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d20c      	bcs.n	8004afc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e009      	b.n	8004b02 <UART_SetConfig+0x5ce>
 8004aee:	bf00      	nop
 8004af0:	40008000 	.word	0x40008000
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	08009908 	.word	0x08009908
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3730      	adds	r7, #48	; 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2a:	d10a      	bne.n	8004c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c80:	f7fc fa4a 	bl	8001118 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d10e      	bne.n	8004cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f82f 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e025      	b.n	8004cfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d10e      	bne.n	8004cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f819 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b09c      	sub	sp, #112	; 0x70
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	e0a9      	b.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1e:	f000 80a5 	beq.w	8004e6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fc f9f9 	bl	8001118 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d140      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	663b      	str	r3, [r7, #96]	; 0x60
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e069      	b.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d051      	beq.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d149      	bne.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004de0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
 8004e02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e34:	623a      	str	r2, [r7, #32]
 8004e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e010      	b.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	f43f af46 	beq.w	8004d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3770      	adds	r7, #112	; 0x70
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_UARTEx_DisableFifoMode+0x16>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e027      	b.n	8004efc <HAL_UARTEx_DisableFifoMode+0x66>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e02d      	b.n	8004f7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f84f 	bl	8005000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e02d      	b.n	8004ff8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f811 	bl	8005000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005020:	e031      	b.n	8005086 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005022:	2308      	movs	r3, #8
 8005024:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005026:	2308      	movs	r3, #8
 8005028:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	0e5b      	lsrs	r3, r3, #25
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	0f5b      	lsrs	r3, r3, #29
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	7b3a      	ldrb	r2, [r7, #12]
 800504e:	4911      	ldr	r1, [pc, #68]	; (8005094 <UARTEx_SetNbDataToProcess+0x94>)
 8005050:	5c8a      	ldrb	r2, [r1, r2]
 8005052:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005056:	7b3a      	ldrb	r2, [r7, #12]
 8005058:	490f      	ldr	r1, [pc, #60]	; (8005098 <UARTEx_SetNbDataToProcess+0x98>)
 800505a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800505c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	7b7a      	ldrb	r2, [r7, #13]
 800506c:	4909      	ldr	r1, [pc, #36]	; (8005094 <UARTEx_SetNbDataToProcess+0x94>)
 800506e:	5c8a      	ldrb	r2, [r1, r2]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005074:	7b7a      	ldrb	r2, [r7, #13]
 8005076:	4908      	ldr	r1, [pc, #32]	; (8005098 <UARTEx_SetNbDataToProcess+0x98>)
 8005078:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800507a:	fb93 f3f2 	sdiv	r3, r3, r2
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	08009920 	.word	0x08009920
 8005098:	08009928 	.word	0x08009928

0800509c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80050b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050d2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80050d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4013      	ands	r3, r2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005100:	b084      	sub	sp, #16
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	f107 0014 	add.w	r0, r7, #20
 800510e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	b004      	add	sp, #16
 8005140:	4770      	bx	lr
	...

08005144 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005144:	b480      	push	{r7}
 8005146:	b09d      	sub	sp, #116	; 0x74
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	2b03      	cmp	r3, #3
 8005174:	d81f      	bhi.n	80051b6 <USB_ActivateEndpoint+0x72>
 8005176:	a201      	add	r2, pc, #4	; (adr r2, 800517c <USB_ActivateEndpoint+0x38>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	0800518d 	.word	0x0800518d
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051bf 	.word	0x080051bf
 8005188:	0800519b 	.word	0x0800519b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800518c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005194:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005198:	e012      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800519a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800519e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80051a6:	e00b      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80051b4:	e004      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80051bc:	e000      	b.n	80051c0 <USB_ActivateEndpoint+0x7c>
      break;
 80051be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b21b      	sxth	r3, r3
 8005202:	4313      	orrs	r3, r2
 8005204:	b21b      	sxth	r3, r3
 8005206:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f040 8149 	bne.w	80054c8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8084 	beq.w	8005348 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	00da      	lsls	r2, r3, #3
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	88db      	ldrh	r3, [r3, #6]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	827b      	strh	r3, [r7, #18]
 8005282:	8a7b      	ldrh	r3, [r7, #18]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <USB_ActivateEndpoint+0x180>
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	823b      	strh	r3, [r7, #16]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	8a3b      	ldrh	r3, [r7, #16]
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d020      	beq.n	800530e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	81bb      	strh	r3, [r7, #12]
 80052e4:	89bb      	ldrh	r3, [r7, #12]
 80052e6:	f083 0320 	eor.w	r3, r3, #32
 80052ea:	81bb      	strh	r3, [r7, #12]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	89bb      	ldrh	r3, [r7, #12]
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
 800530c:	e2a6      	b.n	800585c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	81fb      	strh	r3, [r7, #14]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e289      	b.n	800585c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	4413      	add	r3, r2
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	00da      	lsls	r2, r3, #3
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	4413      	add	r3, r2
 8005366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	88db      	ldrh	r3, [r3, #6]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	4413      	add	r3, r2
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	00da      	lsls	r2, r3, #3
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	4413      	add	r3, r2
 800539a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b3e      	cmp	r3, #62	; 0x3e
 80053a6:	d918      	bls.n	80053da <USB_ActivateEndpoint+0x296>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <USB_ActivateEndpoint+0x27e>
 80053bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053be:	3b01      	subs	r3, #1
 80053c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e029      	b.n	800542e <USB_ActivateEndpoint+0x2ea>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d112      	bne.n	8005408 <USB_ActivateEndpoint+0x2c4>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005400:	b29a      	uxth	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	e012      	b.n	800542e <USB_ActivateEndpoint+0x2ea>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <USB_ActivateEndpoint+0x2de>
 800541c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800541e:	3301      	adds	r3, #1
 8005420:	66bb      	str	r3, [r7, #104]	; 0x68
 8005422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29a      	uxth	r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	847b      	strh	r3, [r7, #34]	; 0x22
 800543c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <USB_ActivateEndpoint+0x33a>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	843b      	strh	r3, [r7, #32]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8c3b      	ldrh	r3, [r7, #32]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	83fb      	strh	r3, [r7, #30]
 8005496:	8bfb      	ldrh	r3, [r7, #30]
 8005498:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800549c:	83fb      	strh	r3, [r7, #30]
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054a4:	83fb      	strh	r3, [r7, #30]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	8bfb      	ldrh	r3, [r7, #30]
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
 80054c6:	e1c9      	b.n	800585c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d11e      	bne.n	800550e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
 800550c:	e01d      	b.n	800554a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555a:	4413      	add	r3, r2
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	00da      	lsls	r2, r3, #3
 8005564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005566:	4413      	add	r3, r2
 8005568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556c:	65bb      	str	r3, [r7, #88]	; 0x58
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	891b      	ldrh	r3, [r3, #8]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	657b      	str	r3, [r7, #84]	; 0x54
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558e:	4413      	add	r3, r2
 8005590:	657b      	str	r3, [r7, #84]	; 0x54
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	00da      	lsls	r2, r3, #3
 8005598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559a:	4413      	add	r3, r2
 800559c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	895b      	ldrh	r3, [r3, #10]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 8093 	bne.w	80056e2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <USB_ActivateEndpoint+0x4cc>
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800561e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01b      	beq.n	8005660 <USB_ActivateEndpoint+0x51c>
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800564c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565c:	b29b      	uxth	r3, r3
 800565e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	873b      	strh	r3, [r7, #56]	; 0x38
 8005678:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800567a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800567e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005682:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005686:	873b      	strh	r3, [r7, #56]	; 0x38
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8013      	strh	r3, [r2, #0]
 80056e0:	e0bc      	b.n	800585c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01d      	beq.n	800573a <USB_ActivateEndpoint+0x5f6>
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800574a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01d      	beq.n	8005792 <USB_ActivateEndpoint+0x64e>
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	78db      	ldrb	r3, [r3, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d024      	beq.n	80057e4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057b8:	f083 0320 	eor.w	r3, r3, #32
 80057bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8013      	strh	r3, [r2, #0]
 80057e2:	e01d      	b.n	8005820 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800585c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005860:	4618      	mov	r0, r3
 8005862:	3774      	adds	r7, #116	; 0x74
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b08d      	sub	sp, #52	; 0x34
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	7b1b      	ldrb	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 808e 	bne.w	800599c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d044      	beq.n	8005912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	81bb      	strh	r3, [r7, #12]
 8005896:	89bb      	ldrh	r3, [r7, #12]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <USB_DeactivateEndpoint+0x6c>
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	817b      	strh	r3, [r7, #10]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	813b      	strh	r3, [r7, #8]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	b29b      	uxth	r3, r3
 800590e:	8013      	strh	r3, [r2, #0]
 8005910:	e192      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	827b      	strh	r3, [r7, #18]
 8005920:	8a7b      	ldrh	r3, [r7, #18]
 8005922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01b      	beq.n	8005962 <USB_DeactivateEndpoint+0xf6>
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	823b      	strh	r3, [r7, #16]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8a3b      	ldrh	r3, [r7, #16]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	81fb      	strh	r3, [r7, #14]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
 800599a:	e14d      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80a5 	bne.w	8005af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	843b      	strh	r3, [r7, #32]
 80059b4:	8c3b      	ldrh	r3, [r7, #32]
 80059b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01b      	beq.n	80059f6 <USB_DeactivateEndpoint+0x18a>
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	83fb      	strh	r3, [r7, #30]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	8bfb      	ldrh	r3, [r7, #30]
 80059e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	83bb      	strh	r3, [r7, #28]
 8005a04:	8bbb      	ldrh	r3, [r7, #28]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01b      	beq.n	8005a46 <USB_DeactivateEndpoint+0x1da>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	837b      	strh	r3, [r7, #26]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8b7b      	ldrh	r3, [r7, #26]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	833b      	strh	r3, [r7, #24]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	8b3b      	ldrh	r3, [r7, #24]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	82fb      	strh	r3, [r7, #22]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8afb      	ldrh	r3, [r7, #22]
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005acc:	82bb      	strh	r3, [r7, #20]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	441a      	add	r2, r3
 8005ad8:	8abb      	ldrh	r3, [r7, #20]
 8005ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	8013      	strh	r3, [r2, #0]
 8005aee:	e0a3      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <USB_DeactivateEndpoint+0x2d4>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <USB_DeactivateEndpoint+0x324>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3734      	adds	r7, #52	; 0x34
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b0c2      	sub	sp, #264	; 0x108
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c54:	6018      	str	r0, [r3, #0]
 8005c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	f040 867b 	bne.w	8006968 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d908      	bls.n	8005ca0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c9e:	e007      	b.n	8005cb0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	7b1b      	ldrb	r3, [r3, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d13a      	bne.n	8005d36 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6959      	ldr	r1, [r3, #20]
 8005ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	88da      	ldrh	r2, [r3, #6]
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ce2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	f001 fc1d 	bl	8007526 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	f000 bde3 	b.w	80068fc <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	f040 843a 	bne.w	80065bc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	f240 83b7 	bls.w	80064d4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 81b3 	beq.w	800616e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d16d      	bne.n	8005f00 <USB_EPStartXfer+0x2ba>
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	4413      	add	r3, r2
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	00da      	lsls	r2, r3, #3
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e64:	2b3e      	cmp	r3, #62	; 0x3e
 8005e66:	d91c      	bls.n	8005ea2 <USB_EPStartXfer+0x25c>
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <USB_EPStartXfer+0x242>
 8005e7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e82:	3b01      	subs	r3, #1
 8005e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e053      	b.n	8005f4a <USB_EPStartXfer+0x304>
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d112      	bne.n	8005ed0 <USB_EPStartXfer+0x28a>
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e03c      	b.n	8005f4a <USB_EPStartXfer+0x304>
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <USB_EPStartXfer+0x2aa>
 8005ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eea:	3301      	adds	r3, #1
 8005eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ef0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e024      	b.n	8005f4a <USB_EPStartXfer+0x304>
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d11c      	bne.n	8005f4a <USB_EPStartXfer+0x304>
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	4413      	add	r3, r2
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00da      	lsls	r2, r3, #3
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	895b      	ldrh	r3, [r3, #10]
 8005f56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6959      	ldr	r1, [r3, #20]
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f78:	6800      	ldr	r0, [r0, #0]
 8005f7a:	f001 fad4 	bl	8007526 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8e:	441a      	add	r2, r3
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d90f      	bls.n	8005fd8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a1a      	ldr	r2, [r3, #32]
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	1ad2      	subs	r2, r2, r3
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	621a      	str	r2, [r3, #32]
 8005fd6:	e00e      	b.n	8005ff6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d16d      	bne.n	80060e2 <USB_EPStartXfer+0x49c>
 8006006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4413      	add	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	00da      	lsls	r2, r3, #3
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	4413      	add	r3, r2
 800603c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d91c      	bls.n	8006084 <USB_EPStartXfer+0x43e>
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <USB_EPStartXfer+0x424>
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	3b01      	subs	r3, #1
 8006066:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800606a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29b      	uxth	r3, r3
 8006074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607c:	b29a      	uxth	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e059      	b.n	8006138 <USB_EPStartXfer+0x4f2>
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	2b00      	cmp	r3, #0
 800608a:	d112      	bne.n	80060b2 <USB_EPStartXfer+0x46c>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006096:	b29a      	uxth	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e042      	b.n	8006138 <USB_EPStartXfer+0x4f2>
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <USB_EPStartXfer+0x48c>
 80060c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29a      	uxth	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e02a      	b.n	8006138 <USB_EPStartXfer+0x4f2>
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d122      	bne.n	8006138 <USB_EPStartXfer+0x4f2>
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	4413      	add	r3, r2
 8006114:	623b      	str	r3, [r7, #32]
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	00da      	lsls	r2, r3, #3
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	b29a      	uxth	r2, r3
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006158:	b29b      	uxth	r3, r3
 800615a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800615e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006162:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	f001 f9dd 	bl	8007526 <USB_WritePMA>
 800616c:	e3c6      	b.n	80068fc <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d16d      	bne.n	800625a <USB_EPStartXfer+0x614>
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	64bb      	str	r3, [r7, #72]	; 0x48
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619e:	4413      	add	r3, r2
 80061a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	00da      	lsls	r2, r3, #3
 80061b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061be:	2b3e      	cmp	r3, #62	; 0x3e
 80061c0:	d91c      	bls.n	80061fc <USB_EPStartXfer+0x5b6>
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <USB_EPStartXfer+0x59c>
 80061d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061dc:	3b01      	subs	r3, #1
 80061de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	029b      	lsls	r3, r3, #10
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e059      	b.n	80062b0 <USB_EPStartXfer+0x66a>
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	2b00      	cmp	r3, #0
 8006202:	d112      	bne.n	800622a <USB_EPStartXfer+0x5e4>
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800620e:	b29a      	uxth	r2, r3
 8006210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006222:	b29a      	uxth	r2, r3
 8006224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e042      	b.n	80062b0 <USB_EPStartXfer+0x66a>
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <USB_EPStartXfer+0x604>
 8006240:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006244:	3301      	adds	r3, #1
 8006246:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800624a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800624e:	b29b      	uxth	r3, r3
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	b29a      	uxth	r2, r3
 8006254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	e02a      	b.n	80062b0 <USB_EPStartXfer+0x66a>
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d122      	bne.n	80062b0 <USB_EPStartXfer+0x66a>
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	653b      	str	r3, [r7, #80]	; 0x50
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628a:	4413      	add	r3, r2
 800628c:	653b      	str	r3, [r7, #80]	; 0x50
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00da      	lsls	r2, r3, #3
 800629c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629e:	4413      	add	r3, r2
 80062a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	891b      	ldrh	r3, [r3, #8]
 80062bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6959      	ldr	r1, [r3, #20]
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062de:	6800      	ldr	r0, [r0, #0]
 80062e0:	f001 f921 	bl	8007526 <USB_WritePMA>
            ep->xfer_buff += len;
 80062e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	441a      	add	r2, r3
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90f      	bls.n	800633e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	621a      	str	r2, [r3, #32]
 800633c:	e00e      	b.n	800635c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800635c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d16d      	bne.n	8006454 <USB_EPStartXfer+0x80e>
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	4413      	add	r3, r2
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	2b3e      	cmp	r3, #62	; 0x3e
 80063ba:	d91c      	bls.n	80063f6 <USB_EPStartXfer+0x7b0>
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <USB_EPStartXfer+0x796>
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e053      	b.n	800649e <USB_EPStartXfer+0x858>
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d112      	bne.n	8006424 <USB_EPStartXfer+0x7de>
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006408:	b29a      	uxth	r2, r3
 800640a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641c:	b29a      	uxth	r2, r3
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	e03c      	b.n	800649e <USB_EPStartXfer+0x858>
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <USB_EPStartXfer+0x7fe>
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e024      	b.n	800649e <USB_EPStartXfer+0x858>
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d11c      	bne.n	800649e <USB_EPStartXfer+0x858>
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	4413      	add	r3, r2
 800647a:	643b      	str	r3, [r7, #64]	; 0x40
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648c:	4413      	add	r3, r2
 800648e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	b29a      	uxth	r2, r3
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	895b      	ldrh	r3, [r3, #10]
 80064aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6959      	ldr	r1, [r3, #20]
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f001 f82a 	bl	8007526 <USB_WritePMA>
 80064d2:	e213      	b.n	80068fc <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80064e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006560:	4413      	add	r3, r2
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	00da      	lsls	r2, r3, #3
 8006572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006574:	4413      	add	r3, r2
 8006576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800657a:	65bb      	str	r3, [r7, #88]	; 0x58
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006580:	b29a      	uxth	r2, r3
 8006582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006584:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	891b      	ldrh	r3, [r3, #8]
 8006592:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6959      	ldr	r1, [r3, #20]
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065b4:	6800      	ldr	r0, [r0, #0]
 80065b6:	f000 ffb6 	bl	8007526 <USB_WritePMA>
 80065ba:	e19f      	b.n	80068fc <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065cc:	1ad2      	subs	r2, r2, r3
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80bc 	beq.w	800677a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	673b      	str	r3, [r7, #112]	; 0x70
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d16d      	bne.n	80066fa <USB_EPStartXfer+0xab4>
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	66bb      	str	r3, [r7, #104]	; 0x68
 800662a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663e:	4413      	add	r3, r2
 8006640:	66bb      	str	r3, [r7, #104]	; 0x68
 8006642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	00da      	lsls	r2, r3, #3
 8006650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006652:	4413      	add	r3, r2
 8006654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006658:	667b      	str	r3, [r7, #100]	; 0x64
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d91c      	bls.n	800669c <USB_EPStartXfer+0xa56>
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <USB_EPStartXfer+0xa3c>
 8006678:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800667c:	3b01      	subs	r3, #1
 800667e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006682:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006694:	b29a      	uxth	r2, r3
 8006696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e053      	b.n	8006744 <USB_EPStartXfer+0xafe>
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d112      	bne.n	80066ca <USB_EPStartXfer+0xa84>
 80066a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e03c      	b.n	8006744 <USB_EPStartXfer+0xafe>
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <USB_EPStartXfer+0xaa4>
 80066e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e024      	b.n	8006744 <USB_EPStartXfer+0xafe>
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d11c      	bne.n	8006744 <USB_EPStartXfer+0xafe>
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006718:	b29b      	uxth	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671e:	4413      	add	r3, r2
 8006720:	673b      	str	r3, [r7, #112]	; 0x70
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	00da      	lsls	r2, r3, #3
 8006730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006732:	4413      	add	r3, r2
 8006734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	b29a      	uxth	r2, r3
 8006740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006742:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	895b      	ldrh	r3, [r3, #10]
 8006750:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6959      	ldr	r1, [r3, #20]
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006764:	b29b      	uxth	r3, r3
 8006766:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800676a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800676e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006772:	6800      	ldr	r0, [r0, #0]
 8006774:	f000 fed7 	bl	8007526 <USB_WritePMA>
 8006778:	e0c0      	b.n	80068fc <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d16d      	bne.n	8006866 <USB_EPStartXfer+0xc20>
 800678a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067aa:	4413      	add	r3, r2
 80067ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067be:	4413      	add	r3, r2
 80067c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	2b3e      	cmp	r3, #62	; 0x3e
 80067cc:	d91c      	bls.n	8006808 <USB_EPStartXfer+0xbc2>
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <USB_EPStartXfer+0xba8>
 80067e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067e8:	3b01      	subs	r3, #1
 80067ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e05f      	b.n	80068c8 <USB_EPStartXfer+0xc82>
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680c:	2b00      	cmp	r3, #0
 800680e:	d112      	bne.n	8006836 <USB_EPStartXfer+0xbf0>
 8006810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800681a:	b29a      	uxth	r2, r3
 800681c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682e:	b29a      	uxth	r2, r3
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e048      	b.n	80068c8 <USB_EPStartXfer+0xc82>
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <USB_EPStartXfer+0xc10>
 800684c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006850:	3301      	adds	r3, #1
 8006852:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006856:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800685a:	b29b      	uxth	r3, r3
 800685c:	029b      	lsls	r3, r3, #10
 800685e:	b29a      	uxth	r2, r3
 8006860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	e030      	b.n	80068c8 <USB_EPStartXfer+0xc82>
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d128      	bne.n	80068c8 <USB_EPStartXfer+0xc82>
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800689a:	4413      	add	r3, r2
 800689c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	00da      	lsls	r2, r3, #3
 80068ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	891b      	ldrh	r3, [r3, #8]
 80068d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6959      	ldr	r1, [r3, #20]
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068f6:	6800      	ldr	r0, [r0, #0]
 80068f8:	f000 fe15 	bl	8007526 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	817b      	strh	r3, [r7, #10]
 8006924:	897b      	ldrh	r3, [r7, #10]
 8006926:	f083 0310 	eor.w	r3, r3, #16
 800692a:	817b      	strh	r3, [r7, #10]
 800692c:	897b      	ldrh	r3, [r7, #10]
 800692e:	f083 0320 	eor.w	r3, r3, #32
 8006932:	817b      	strh	r3, [r7, #10]
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	897b      	ldrh	r3, [r7, #10]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]
 8006964:	f000 bc9f 	b.w	80072a6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	7b1b      	ldrb	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 80ae 	bne.w	8006ad6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	429a      	cmp	r2, r3
 8006994:	d917      	bls.n	80069c6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	1ad2      	subs	r2, r2, r3
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	619a      	str	r2, [r3, #24]
 80069c4:	e00e      	b.n	80069e4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80069d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2200      	movs	r2, #0
 80069e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a08:	4413      	add	r3, r2
 8006a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	00da      	lsls	r2, r3, #3
 8006a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a30:	d91d      	bls.n	8006a6e <USB_EPStartXfer+0xe28>
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <USB_EPStartXfer+0xe0c>
 8006a48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	029b      	lsls	r3, r3, #10
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e3e1      	b.n	8007232 <USB_EPStartXfer+0x15ec>
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d116      	bne.n	8006aa4 <USB_EPStartXfer+0xe5e>
 8006a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	e3c6      	b.n	8007232 <USB_EPStartXfer+0x15ec>
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <USB_EPStartXfer+0xe7e>
 8006aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006abe:	3301      	adds	r3, #1
 8006ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	029b      	lsls	r3, r3, #10
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	e3ad      	b.n	8007232 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	f040 8200 	bne.w	8006ee8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 8091 	bne.w	8006c1c <USB_EPStartXfer+0xfd6>
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b1e:	4413      	add	r3, r2
 8006b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	00da      	lsls	r2, r3, #3
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b4e:	d925      	bls.n	8006b9c <USB_EPStartXfer+0xf56>
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <USB_EPStartXfer+0xf3a>
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	e074      	b.n	8006c86 <USB_EPStartXfer+0x1040>
 8006b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d116      	bne.n	8006bda <USB_EPStartXfer+0xf94>
 8006bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e055      	b.n	8006c86 <USB_EPStartXfer+0x1040>
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <USB_EPStartXfer+0xfc4>
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	3301      	adds	r3, #1
 8006c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	029b      	lsls	r3, r3, #10
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	e034      	b.n	8006c86 <USB_EPStartXfer+0x1040>
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d12c      	bne.n	8006c86 <USB_EPStartXfer+0x1040>
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c50:	4413      	add	r3, r2
 8006c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	00da      	lsls	r2, r3, #3
 8006c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 8091 	bne.w	8006dc8 <USB_EPStartXfer+0x1182>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cca:	4413      	add	r3, r2
 8006ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	00da      	lsls	r2, r3, #3
 8006cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cfa:	d925      	bls.n	8006d48 <USB_EPStartXfer+0x1102>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <USB_EPStartXfer+0x10e6>
 8006d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e06d      	b.n	8006e24 <USB_EPStartXfer+0x11de>
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <USB_EPStartXfer+0x1140>
 8006d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e04e      	b.n	8006e24 <USB_EPStartXfer+0x11de>
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <USB_EPStartXfer+0x1170>
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e02d      	b.n	8006e24 <USB_EPStartXfer+0x11de>
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d125      	bne.n	8006e24 <USB_EPStartXfer+0x11de>
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dee:	4413      	add	r3, r2
 8006df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 81fe 	beq.w	8007232 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <USB_EPStartXfer+0x1228>
 8006e62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 81db 	bne.w	8007232 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 81d4 	bne.w	8007232 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ede:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]
 8006ee6:	e1a4      	b.n	8007232 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	78db      	ldrb	r3, [r3, #3]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	f040 819a 	bne.w	800722e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d917      	bls.n	8006f46 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	619a      	str	r2, [r3, #24]
 8006f44:	e00e      	b.n	8006f64 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d178      	bne.n	8007066 <USB_EPStartXfer+0x1420>
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f98:	4413      	add	r3, r2
 8006f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	00da      	lsls	r2, r3, #3
 8006fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc0:	d91d      	bls.n	8006ffe <USB_EPStartXfer+0x13b8>
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <USB_EPStartXfer+0x139c>
 8006fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	e064      	b.n	80070c8 <USB_EPStartXfer+0x1482>
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	2b00      	cmp	r3, #0
 8007004:	d116      	bne.n	8007034 <USB_EPStartXfer+0x13ee>
 8007006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007012:	b29a      	uxth	r2, r3
 8007014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e049      	b.n	80070c8 <USB_EPStartXfer+0x1482>
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <USB_EPStartXfer+0x140e>
 800704a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e030      	b.n	80070c8 <USB_EPStartXfer+0x1482>
 8007066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d128      	bne.n	80070c8 <USB_EPStartXfer+0x1482>
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800709a:	4413      	add	r3, r2
 800709c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	00da      	lsls	r2, r3, #3
 80070ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d178      	bne.n	80071d8 <USB_EPStartXfer+0x1592>
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007102:	b29b      	uxth	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800710a:	4413      	add	r3, r2
 800710c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	00da      	lsls	r2, r3, #3
 800711e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007122:	4413      	add	r3, r2
 8007124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	2b3e      	cmp	r3, #62	; 0x3e
 8007132:	d91d      	bls.n	8007170 <USB_EPStartXfer+0x152a>
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USB_EPStartXfer+0x150e>
 800714a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800714e:	3b01      	subs	r3, #1
 8007150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007158:	b29b      	uxth	r3, r3
 800715a:	029b      	lsls	r3, r3, #10
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e060      	b.n	8007232 <USB_EPStartXfer+0x15ec>
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007174:	2b00      	cmp	r3, #0
 8007176:	d116      	bne.n	80071a6 <USB_EPStartXfer+0x1560>
 8007178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	e045      	b.n	8007232 <USB_EPStartXfer+0x15ec>
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <USB_EPStartXfer+0x1580>
 80071bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c0:	3301      	adds	r3, #1
 80071c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e02c      	b.n	8007232 <USB_EPStartXfer+0x15ec>
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d124      	bne.n	8007232 <USB_EPStartXfer+0x15ec>
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071fe:	4413      	add	r3, r2
 8007200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	00da      	lsls	r2, r3, #3
 8007212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007216:	4413      	add	r3, r2
 8007218:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800721c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007224:	b29a      	uxth	r2, r3
 8007226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e001      	b.n	8007232 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e03a      	b.n	80072a8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800725c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007264:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007268:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800726c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007270:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d020      	beq.n	8007306 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072da:	81bb      	strh	r3, [r7, #12]
 80072dc:	89bb      	ldrh	r3, [r7, #12]
 80072de:	f083 0310 	eor.w	r3, r3, #16
 80072e2:	81bb      	strh	r3, [r7, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	89bb      	ldrh	r3, [r7, #12]
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
 8007304:	e01f      	b.n	8007346 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731c:	81fb      	strh	r3, [r7, #14]
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007324:	81fb      	strh	r3, [r7, #14]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007342:	b29b      	uxth	r3, r3
 8007344:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	7b1b      	ldrb	r3, [r3, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 809d 	bne.w	80074a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d04c      	beq.n	800740a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	823b      	strh	r3, [r7, #16]
 800737e:	8a3b      	ldrh	r3, [r7, #16]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <USB_EPClearStall+0x6c>
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	81fb      	strh	r3, [r7, #14]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	441a      	add	r2, r3
 80073aa:	89fb      	ldrh	r3, [r7, #14]
 80073ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	78db      	ldrb	r3, [r3, #3]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d06c      	beq.n	80074a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	81bb      	strh	r3, [r7, #12]
 80073e0:	89bb      	ldrh	r3, [r7, #12]
 80073e2:	f083 0320 	eor.w	r3, r3, #32
 80073e6:	81bb      	strh	r3, [r7, #12]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	89bb      	ldrh	r3, [r7, #12]
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e04b      	b.n	80074a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	82fb      	strh	r3, [r7, #22]
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01b      	beq.n	800745a <USB_EPClearStall+0x106>
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	82bb      	strh	r3, [r7, #20]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	8abb      	ldrh	r3, [r7, #20]
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800746c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007470:	827b      	strh	r3, [r7, #18]
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007478:	827b      	strh	r3, [r7, #18]
 800747a:	8a7b      	ldrh	r3, [r7, #18]
 800747c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007480:	827b      	strh	r3, [r7, #18]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	8a7b      	ldrh	r3, [r7, #18]
 800748e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2280      	movs	r2, #128	; 0x80
 80074c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007514:	b29b      	uxth	r3, r3
 8007516:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007526:	b480      	push	{r7}
 8007528:	b08d      	sub	sp, #52	; 0x34
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	4611      	mov	r1, r2
 8007532:	461a      	mov	r2, r3
 8007534:	460b      	mov	r3, r1
 8007536:	80fb      	strh	r3, [r7, #6]
 8007538:	4613      	mov	r3, r2
 800753a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800753c:	88bb      	ldrh	r3, [r7, #4]
 800753e:	3301      	adds	r3, #1
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007556:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755c:	e01b      	b.n	8007596 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	3301      	adds	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	b29a      	uxth	r2, r3
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	3302      	adds	r3, #2
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	3301      	adds	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	3b01      	subs	r3, #1
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e0      	bne.n	800755e <USB_WritePMA+0x38>
  }
}
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	3734      	adds	r7, #52	; 0x34
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b08b      	sub	sp, #44	; 0x2c
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	4611      	mov	r1, r2
 80075b6:	461a      	mov	r2, r3
 80075b8:	460b      	mov	r3, r1
 80075ba:	80fb      	strh	r3, [r7, #6]
 80075bc:	4613      	mov	r3, r2
 80075be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075c0:	88bb      	ldrh	r3, [r7, #4]
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
 80075e0:	e018      	b.n	8007614 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	3302      	adds	r3, #2
 80075ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	b2da      	uxtb	r2, r3
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	3301      	adds	r3, #1
 800760c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3b01      	subs	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800761a:	88bb      	ldrh	r3, [r7, #4]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	701a      	strb	r2, [r3, #0]
  }
}
 8007636:	bf00      	nop
 8007638:	372c      	adds	r7, #44	; 0x2c
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800764e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007652:	f002 f8a7 	bl	80097a4 <USBD_static_malloc>
 8007656:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007666:	2302      	movs	r3, #2
 8007668:	e066      	b.n	8007738 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1b      	ldrb	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d119      	bne.n	80076ae <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800767a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767e:	2202      	movs	r2, #2
 8007680:	2181      	movs	r1, #129	; 0x81
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 ff33 	bl	80094ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800768e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007692:	2202      	movs	r2, #2
 8007694:	2101      	movs	r1, #1
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 ff29 	bl	80094ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2210      	movs	r2, #16
 80076a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80076ac:	e016      	b.n	80076dc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076ae:	2340      	movs	r3, #64	; 0x40
 80076b0:	2202      	movs	r2, #2
 80076b2:	2181      	movs	r1, #129	; 0x81
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 ff1a 	bl	80094ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	2202      	movs	r2, #2
 80076c4:	2101      	movs	r1, #1
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 ff11 	bl	80094ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2210      	movs	r2, #16
 80076d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076dc:	2308      	movs	r3, #8
 80076de:	2203      	movs	r2, #3
 80076e0:	2182      	movs	r1, #130	; 0x82
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 ff03 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7c1b      	ldrb	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800771c:	2101      	movs	r1, #1
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 ffd5 	bl	80096ce <USBD_LL_PrepareReceive>
 8007724:	e007      	b.n	8007736 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	2101      	movs	r1, #1
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 ffcc 	bl	80096ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800774c:	2181      	movs	r1, #129	; 0x81
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fef3 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800775a:	2101      	movs	r1, #1
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 feec 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800776a:	2182      	movs	r1, #130	; 0x82
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fee4 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779c:	4618      	mov	r0, r3
 800779e:	f002 f80f 	bl	80097c0 <USBD_static_free>
    pdev->pClassData = NULL;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80077d8:	2303      	movs	r3, #3
 80077da:	e0af      	b.n	800793c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d03f      	beq.n	8007868 <USBD_CDC_Setup+0xb4>
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	f040 809f 	bne.w	800792c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	88db      	ldrh	r3, [r3, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02e      	beq.n	8007854 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b25b      	sxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da16      	bge.n	800782e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800780c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	88d2      	ldrh	r2, [r2, #6]
 8007812:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	2b07      	cmp	r3, #7
 800781a:	bf28      	it	cs
 800781c:	2307      	movcs	r3, #7
 800781e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	89fa      	ldrh	r2, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fa9f 	bl	8008d6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800782c:	e085      	b.n	800793a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	785a      	ldrb	r2, [r3, #1]
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007844:	6939      	ldr	r1, [r7, #16]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	88db      	ldrh	r3, [r3, #6]
 800784a:	461a      	mov	r2, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fab8 	bl	8008dc2 <USBD_CtlPrepareRx>
      break;
 8007852:	e072      	b.n	800793a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	7850      	ldrb	r0, [r2, #1]
 8007860:	2200      	movs	r2, #0
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	4798      	blx	r3
      break;
 8007866:	e068      	b.n	800793a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b0b      	cmp	r3, #11
 800786e:	d852      	bhi.n	8007916 <USBD_CDC_Setup+0x162>
 8007870:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <USBD_CDC_Setup+0xc4>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	080078a9 	.word	0x080078a9
 800787c:	08007925 	.word	0x08007925
 8007880:	08007917 	.word	0x08007917
 8007884:	08007917 	.word	0x08007917
 8007888:	08007917 	.word	0x08007917
 800788c:	08007917 	.word	0x08007917
 8007890:	08007917 	.word	0x08007917
 8007894:	08007917 	.word	0x08007917
 8007898:	08007917 	.word	0x08007917
 800789c:	08007917 	.word	0x08007917
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078fd 	.word	0x080078fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d107      	bne.n	80078c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078b4:	f107 030a 	add.w	r3, r7, #10
 80078b8:	2202      	movs	r2, #2
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fa54 	bl	8008d6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078c2:	e032      	b.n	800792a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f9de 	bl	8008c88 <USBD_CtlError>
            ret = USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	75fb      	strb	r3, [r7, #23]
          break;
 80078d0:	e02b      	b.n	800792a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d107      	bne.n	80078ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078de:	f107 030d 	add.w	r3, r7, #13
 80078e2:	2201      	movs	r2, #1
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fa3f 	bl	8008d6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ec:	e01d      	b.n	800792a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f9c9 	bl	8008c88 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	75fb      	strb	r3, [r7, #23]
          break;
 80078fa:	e016      	b.n	800792a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b03      	cmp	r3, #3
 8007906:	d00f      	beq.n	8007928 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 f9bc 	bl	8008c88 <USBD_CtlError>
            ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007914:	e008      	b.n	8007928 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 f9b5 	bl	8008c88 <USBD_CtlError>
          ret = USBD_FAIL;
 800791e:	2303      	movs	r3, #3
 8007920:	75fb      	strb	r3, [r7, #23]
          break;
 8007922:	e002      	b.n	800792a <USBD_CDC_Setup+0x176>
          break;
 8007924:	bf00      	nop
 8007926:	e008      	b.n	800793a <USBD_CDC_Setup+0x186>
          break;
 8007928:	bf00      	nop
      }
      break;
 800792a:	e006      	b.n	800793a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 f9aa 	bl	8008c88 <USBD_CtlError>
      ret = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	75fb      	strb	r3, [r7, #23]
      break;
 8007938:	bf00      	nop
  }

  return (uint8_t)ret;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007962:	2303      	movs	r3, #3
 8007964:	e04f      	b.n	8007a06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	3318      	adds	r3, #24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d029      	beq.n	80079d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3318      	adds	r3, #24
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	78f9      	ldrb	r1, [r7, #3]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	460b      	mov	r3, r1
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	4403      	add	r3, r0
 80079a4:	3338      	adds	r3, #56	; 0x38
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d110      	bne.n	80079d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	3318      	adds	r3, #24
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80079ca:	78f9      	ldrb	r1, [r7, #3]
 80079cc:	2300      	movs	r3, #0
 80079ce:	2200      	movs	r2, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 fe5b 	bl	800968c <USBD_LL_Transmit>
 80079d6:	e015      	b.n	8007a04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e015      	b.n	8007a5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fe6b 	bl	8009710 <USBD_LL_GetRxDataSize>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a56:	4611      	mov	r1, r2
 8007a58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e01b      	b.n	8007ab6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d015      	beq.n	8007ab4 <USBD_CDC_EP0_RxReady+0x50>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a8e:	2bff      	cmp	r3, #255	; 0xff
 8007a90:	d010      	beq.n	8007ab4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007aa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007aa8:	b292      	uxth	r2, r2
 8007aaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	22ff      	movs	r2, #255	; 0xff
 8007ab0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2243      	movs	r2, #67	; 0x43
 8007acc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ace:	4b03      	ldr	r3, [pc, #12]	; (8007adc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	20000094 	.word	0x20000094

08007ae0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2243      	movs	r2, #67	; 0x43
 8007aec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007aee:	4b03      	ldr	r3, [pc, #12]	; (8007afc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20000050 	.word	0x20000050

08007b00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2243      	movs	r2, #67	; 0x43
 8007b0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007b0e:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	200000d8 	.word	0x200000d8

08007b20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	220a      	movs	r2, #10
 8007b2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b2e:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	2000000c 	.word	0x2000000c

08007b40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e004      	b.n	8007b5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e008      	b.n	8007b9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e004      	b.n	8007bcc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e016      	b.n	8007c24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7c1b      	ldrb	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c08:	2101      	movs	r1, #1
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fd5f 	bl	80096ce <USBD_LL_PrepareReceive>
 8007c10:	e007      	b.n	8007c22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c18:	2340      	movs	r3, #64	; 0x40
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fd56 	bl	80096ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e01f      	b.n	8007c84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	79fa      	ldrb	r2, [r7, #7]
 8007c76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f001 fbbd 	bl	80093f8 <USBD_LL_Init>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e016      	b.n	8007cd2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f107 020e 	add.w	r2, r7, #14
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	4602      	mov	r2, r0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fbe8 	bl	80094b8 <USBD_LL_Start>
 8007ce8:	4603      	mov	r3, r0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d14:	2303      	movs	r3, #3
 8007d16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	4611      	mov	r1, r2
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
  }

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 ff46 	bl	8008c14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d01a      	beq.n	8007de2 <USBD_LL_SetupStage+0x72>
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d822      	bhi.n	8007df6 <USBD_LL_SetupStage+0x86>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <USBD_LL_SetupStage+0x4a>
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d00a      	beq.n	8007dce <USBD_LL_SetupStage+0x5e>
 8007db8:	e01d      	b.n	8007df6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9ee 	bl	80081a4 <USBD_StdDevReq>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
      break;
 8007dcc:	e020      	b.n	8007e10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa52 	bl	8008280 <USBD_StdItfReq>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
      break;
 8007de0:	e016      	b.n	8007e10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa91 	bl	8008312 <USBD_StdEPReq>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]
      break;
 8007df4:	e00c      	b.n	8007e10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fbb7 	bl	8009578 <USBD_LL_StallEP>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0e:	bf00      	nop
  }

  return ret;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	460b      	mov	r3, r1
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d138      	bne.n	8007ea0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d14a      	bne.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d913      	bls.n	8007e74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf28      	it	cs
 8007e66:	4613      	movcs	r3, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 ffc5 	bl	8008dfc <USBD_CtlContinueRx>
 8007e72:	e030      	b.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d10b      	bne.n	8007e98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 ffc0 	bl	8008e1e <USBD_CtlSendStatus>
 8007e9e:	e01a      	b.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d114      	bne.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	7afa      	ldrb	r2, [r7, #11]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	4798      	blx	r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	e000      	b.n	8007ed8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d16b      	bne.n	8007fcc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d156      	bne.n	8007fb2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d914      	bls.n	8007f3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 ff3a 	bl	8008da0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f001 fbcb 	bl	80096ce <USBD_LL_PrepareReceive>
 8007f38:	e03b      	b.n	8007fb2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d11c      	bne.n	8007f80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d316      	bcc.n	8007f80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d20f      	bcs.n	8007f80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f60:	2200      	movs	r2, #0
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 ff1b 	bl	8008da0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f001 fba8 	bl	80096ce <USBD_LL_PrepareReceive>
 8007f7e:	e018      	b.n	8007fb2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d10b      	bne.n	8007fa4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 fae6 	bl	8009578 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 ff49 	bl	8008e44 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d122      	bne.n	8008002 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fe98 	bl	8007cf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fca:	e01a      	b.n	8008002 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d114      	bne.n	8008002 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00e      	beq.n	8008002 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	7afa      	ldrb	r2, [r7, #11]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	e000      	b.n	8008004 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	e02f      	b.n	80080a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6852      	ldr	r2, [r2, #4]
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	4611      	mov	r1, r2
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800806a:	2340      	movs	r3, #64	; 0x40
 800806c:	2200      	movs	r2, #0
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 fa3c 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2240      	movs	r2, #64	; 0x40
 8008082:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	2200      	movs	r2, #0
 800808a:	2180      	movs	r1, #128	; 0x80
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fa2e 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2240      	movs	r2, #64	; 0x40
 800809c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2204      	movs	r2, #4
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b04      	cmp	r3, #4
 8008106:	d106      	bne.n	8008116 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800810e:	b2da      	uxtb	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	e012      	b.n	8008160 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b03      	cmp	r3, #3
 8008144:	d10b      	bne.n	800815e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	3301      	adds	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008186:	8a3b      	ldrh	r3, [r7, #16]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b21a      	sxth	r2, r3
 800818c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008190:	4313      	orrs	r3, r2
 8008192:	b21b      	sxth	r3, r3
 8008194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008196:	89fb      	ldrh	r3, [r7, #14]
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d005      	beq.n	80081ca <USBD_StdDevReq+0x26>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d853      	bhi.n	800826a <USBD_StdDevReq+0xc6>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <USBD_StdDevReq+0x3a>
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d14f      	bne.n	800826a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e04a      	b.n	8008274 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d83b      	bhi.n	800825e <USBD_StdDevReq+0xba>
 80081e6:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBD_StdDevReq+0x48>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008241 	.word	0x08008241
 80081f0:	08008255 	.word	0x08008255
 80081f4:	0800825f 	.word	0x0800825f
 80081f8:	0800824b 	.word	0x0800824b
 80081fc:	0800825f 	.word	0x0800825f
 8008200:	0800821f 	.word	0x0800821f
 8008204:	08008215 	.word	0x08008215
 8008208:	0800825f 	.word	0x0800825f
 800820c:	08008237 	.word	0x08008237
 8008210:	08008229 	.word	0x08008229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9de 	bl	80085d8 <USBD_GetDescriptor>
          break;
 800821c:	e024      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fb6d 	bl	8008900 <USBD_SetAddress>
          break;
 8008226:	e01f      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fbac 	bl	8008988 <USBD_SetConfig>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
          break;
 8008234:	e018      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc4b 	bl	8008ad4 <USBD_GetConfig>
          break;
 800823e:	e013      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fc7c 	bl	8008b40 <USBD_GetStatus>
          break;
 8008248:	e00e      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fcab 	bl	8008ba8 <USBD_SetFeature>
          break;
 8008252:	e009      	b.n	8008268 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fcba 	bl	8008bd0 <USBD_ClrFeature>
          break;
 800825c:	e004      	b.n	8008268 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fd11 	bl	8008c88 <USBD_CtlError>
          break;
 8008266:	bf00      	nop
      }
      break;
 8008268:	e004      	b.n	8008274 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fd0b 	bl	8008c88 <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }

  return ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d005      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d82f      	bhi.n	80082fe <USBD_StdItfReq+0x7e>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d12b      	bne.n	80082fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d81d      	bhi.n	80082f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d813      	bhi.n	80082e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d110      	bne.n	80082fa <USBD_StdItfReq+0x7a>
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fd9d 	bl	8008e1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082e4:	e009      	b.n	80082fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fccd 	bl	8008c88 <USBD_CtlError>
          break;
 80082ee:	e004      	b.n	80082fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fcc8 	bl	8008c88 <USBD_CtlError>
          break;
 80082f8:	e000      	b.n	80082fc <USBD_StdItfReq+0x7c>
          break;
 80082fa:	bf00      	nop
      }
      break;
 80082fc:	e004      	b.n	8008308 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fcc1 	bl	8008c88 <USBD_CtlError>
      break;
 8008306:	bf00      	nop
  }

  return ret;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	889b      	ldrh	r3, [r3, #4]
 8008324:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	d007      	beq.n	8008342 <USBD_StdEPReq+0x30>
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	f200 8145 	bhi.w	80085c2 <USBD_StdEPReq+0x2b0>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00c      	beq.n	8008356 <USBD_StdEPReq+0x44>
 800833c:	2b20      	cmp	r3, #32
 800833e:	f040 8140 	bne.w	80085c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
      break;
 8008354:	e13a      	b.n	80085cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d007      	beq.n	800836e <USBD_StdEPReq+0x5c>
 800835e:	2b03      	cmp	r3, #3
 8008360:	f300 8129 	bgt.w	80085b6 <USBD_StdEPReq+0x2a4>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d07f      	beq.n	8008468 <USBD_StdEPReq+0x156>
 8008368:	2b01      	cmp	r3, #1
 800836a:	d03c      	beq.n	80083e6 <USBD_StdEPReq+0xd4>
 800836c:	e123      	b.n	80085b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d002      	beq.n	8008380 <USBD_StdEPReq+0x6e>
 800837a:	2b03      	cmp	r3, #3
 800837c:	d016      	beq.n	80083ac <USBD_StdEPReq+0x9a>
 800837e:	e02c      	b.n	80083da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <USBD_StdEPReq+0x90>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d00a      	beq.n	80083a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f8f1 	bl	8009578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f8ed 	bl	8009578 <USBD_LL_StallEP>
 800839e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a0:	e020      	b.n	80083e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc6f 	bl	8008c88 <USBD_CtlError>
              break;
 80083aa:	e01b      	b.n	80083e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	885b      	ldrh	r3, [r3, #2]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10e      	bne.n	80083d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <USBD_StdEPReq+0xc0>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b80      	cmp	r3, #128	; 0x80
 80083be:	d008      	beq.n	80083d2 <USBD_StdEPReq+0xc0>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	88db      	ldrh	r3, [r3, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f8d3 	bl	8009578 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd23 	bl	8008e1e <USBD_CtlSendStatus>

              break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fc53 	bl	8008c88 <USBD_CtlError>
              break;
 80083e2:	bf00      	nop
          }
          break;
 80083e4:	e0ec      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0xe6>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d016      	beq.n	8008424 <USBD_StdEPReq+0x112>
 80083f6:	e030      	b.n	800845a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <USBD_StdEPReq+0x108>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d00a      	beq.n	800841a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f8b5 	bl	8009578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f8b1 	bl	8009578 <USBD_LL_StallEP>
 8008416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008418:	e025      	b.n	8008466 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc33 	bl	8008c88 <USBD_CtlError>
              break;
 8008422:	e020      	b.n	8008466 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	885b      	ldrh	r3, [r3, #2]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11b      	bne.n	8008464 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 f8bb 	bl	80095b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fcec 	bl	8008e1e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008458:	e004      	b.n	8008464 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc13 	bl	8008c88 <USBD_CtlError>
              break;
 8008462:	e000      	b.n	8008466 <USBD_StdEPReq+0x154>
              break;
 8008464:	bf00      	nop
          }
          break;
 8008466:	e0ab      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0x168>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d032      	beq.n	80084de <USBD_StdEPReq+0x1cc>
 8008478:	e097      	b.n	80085aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <USBD_StdEPReq+0x17e>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d004      	beq.n	8008490 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbfd 	bl	8008c88 <USBD_CtlError>
                break;
 800848e:	e091      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008494:	2b00      	cmp	r3, #0
 8008496:	da0b      	bge.n	80084b0 <USBD_StdEPReq+0x19e>
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	3310      	adds	r3, #16
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	3304      	adds	r3, #4
 80084ae:	e00b      	b.n	80084c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	3304      	adds	r3, #4
 80084c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2202      	movs	r2, #2
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc47 	bl	8008d6a <USBD_CtlSendData>
              break;
 80084dc:	e06a      	b.n	80085b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da11      	bge.n	800850a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3324      	adds	r3, #36	; 0x24
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d117      	bne.n	8008530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fbc0 	bl	8008c88 <USBD_CtlError>
                  break;
 8008508:	e054      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fbad 	bl	8008c88 <USBD_CtlError>
                  break;
 800852e:	e041      	b.n	80085b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	da0b      	bge.n	8008550 <USBD_StdEPReq+0x23e>
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	3310      	adds	r3, #16
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	e00b      	b.n	8008568 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x264>
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b80      	cmp	r3, #128	; 0x80
 8008574:	d103      	bne.n	800857e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	e00e      	b.n	800859c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 f836 	bl	80095f4 <USBD_LL_IsStallEP>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e002      	b.n	800859c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2202      	movs	r2, #2
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fbe1 	bl	8008d6a <USBD_CtlSendData>
              break;
 80085a8:	e004      	b.n	80085b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fb6b 	bl	8008c88 <USBD_CtlError>
              break;
 80085b2:	bf00      	nop
          }
          break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb65 	bl	8008c88 <USBD_CtlError>
          break;
 80085be:	bf00      	nop
      }
      break;
 80085c0:	e004      	b.n	80085cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fb5f 	bl	8008c88 <USBD_CtlError>
      break;
 80085ca:	bf00      	nop
  }

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	2b0e      	cmp	r3, #14
 80085fa:	f200 8152 	bhi.w	80088a2 <USBD_GetDescriptor+0x2ca>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USBD_GetDescriptor+0x2c>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008675 	.word	0x08008675
 8008608:	0800868d 	.word	0x0800868d
 800860c:	080086cd 	.word	0x080086cd
 8008610:	080088a3 	.word	0x080088a3
 8008614:	080088a3 	.word	0x080088a3
 8008618:	08008843 	.word	0x08008843
 800861c:	0800886f 	.word	0x0800886f
 8008620:	080088a3 	.word	0x080088a3
 8008624:	080088a3 	.word	0x080088a3
 8008628:	080088a3 	.word	0x080088a3
 800862c:	080088a3 	.word	0x080088a3
 8008630:	080088a3 	.word	0x080088a3
 8008634:	080088a3 	.word	0x080088a3
 8008638:	080088a3 	.word	0x080088a3
 800863c:	08008641 	.word	0x08008641
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008662:	e126      	b.n	80088b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fb0e 	bl	8008c88 <USBD_CtlError>
        err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
      break;
 8008672:	e11e      	b.n	80088b2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7c12      	ldrb	r2, [r2, #16]
 8008680:	f107 0108 	add.w	r1, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
      break;
 800868a:	e112      	b.n	80088b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7c1b      	ldrb	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10d      	bne.n	80086b0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f107 0208 	add.w	r2, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086ae:	e100      	b.n	80088b2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	f107 0208 	add.w	r2, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	2202      	movs	r2, #2
 80086c8:	701a      	strb	r2, [r3, #0]
      break;
 80086ca:	e0f2      	b.n	80088b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	885b      	ldrh	r3, [r3, #2]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	f200 80ac 	bhi.w	8008830 <USBD_GetDescriptor+0x258>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <USBD_GetDescriptor+0x108>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	0800872d 	.word	0x0800872d
 80086e8:	08008761 	.word	0x08008761
 80086ec:	08008795 	.word	0x08008795
 80086f0:	080087c9 	.word	0x080087c9
 80086f4:	080087fd 	.word	0x080087fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	7c12      	ldrb	r2, [r2, #16]
 8008710:	f107 0108 	add.w	r1, r7, #8
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
 8008718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800871a:	e091      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fab2 	bl	8008c88 <USBD_CtlError>
            err++;
 8008724:	7afb      	ldrb	r3, [r7, #11]
 8008726:	3301      	adds	r3, #1
 8008728:	72fb      	strb	r3, [r7, #11]
          break;
 800872a:	e089      	b.n	8008840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7c12      	ldrb	r2, [r2, #16]
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874e:	e077      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fa98 	bl	8008c88 <USBD_CtlError>
            err++;
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	3301      	adds	r3, #1
 800875c:	72fb      	strb	r3, [r7, #11]
          break;
 800875e:	e06f      	b.n	8008840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008782:	e05d      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa7e 	bl	8008c88 <USBD_CtlError>
            err++;
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	3301      	adds	r3, #1
 8008790:	72fb      	strb	r3, [r7, #11]
          break;
 8008792:	e055      	b.n	8008840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	f107 0108 	add.w	r1, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b6:	e043      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa64 	bl	8008c88 <USBD_CtlError>
            err++;
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	3301      	adds	r3, #1
 80087c4:	72fb      	strb	r3, [r7, #11]
          break;
 80087c6:	e03b      	b.n	8008840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7c12      	ldrb	r2, [r2, #16]
 80087e0:	f107 0108 	add.w	r1, r7, #8
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ea:	e029      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa4a 	bl	8008c88 <USBD_CtlError>
            err++;
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	3301      	adds	r3, #1
 80087f8:	72fb      	strb	r3, [r7, #11]
          break;
 80087fa:	e021      	b.n	8008840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881e:	e00f      	b.n	8008840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa30 	bl	8008c88 <USBD_CtlError>
            err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
          break;
 800882e:	e007      	b.n	8008840 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa28 	bl	8008c88 <USBD_CtlError>
          err++;
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	3301      	adds	r3, #1
 800883c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800883e:	bf00      	nop
      }
      break;
 8008840:	e037      	b.n	80088b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7c1b      	ldrb	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d109      	bne.n	800885e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	f107 0208 	add.w	r2, r7, #8
 8008856:	4610      	mov	r0, r2
 8008858:	4798      	blx	r3
 800885a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800885c:	e029      	b.n	80088b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fa11 	bl	8008c88 <USBD_CtlError>
        err++;
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	3301      	adds	r3, #1
 800886a:	72fb      	strb	r3, [r7, #11]
      break;
 800886c:	e021      	b.n	80088b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7c1b      	ldrb	r3, [r3, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10d      	bne.n	8008892 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	f107 0208 	add.w	r2, r7, #8
 8008882:	4610      	mov	r0, r2
 8008884:	4798      	blx	r3
 8008886:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	2207      	movs	r2, #7
 800888e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008890:	e00f      	b.n	80088b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9f7 	bl	8008c88 <USBD_CtlError>
        err++;
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	3301      	adds	r3, #1
 800889e:	72fb      	strb	r3, [r7, #11]
      break;
 80088a0:	e007      	b.n	80088b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9ef 	bl	8008c88 <USBD_CtlError>
      err++;
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	3301      	adds	r3, #1
 80088ae:	72fb      	strb	r3, [r7, #11]
      break;
 80088b0:	bf00      	nop
  }

  if (err != 0U)
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11e      	bne.n	80088f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	88db      	ldrh	r3, [r3, #6]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d016      	beq.n	80088ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80088c0:	893b      	ldrh	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88da      	ldrh	r2, [r3, #6]
 80088ca:	893b      	ldrh	r3, [r7, #8]
 80088cc:	4293      	cmp	r3, r2
 80088ce:	bf28      	it	cs
 80088d0:	4613      	movcs	r3, r2
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088d6:	893b      	ldrh	r3, [r7, #8]
 80088d8:	461a      	mov	r2, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fa44 	bl	8008d6a <USBD_CtlSendData>
 80088e2:	e009      	b.n	80088f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9ce 	bl	8008c88 <USBD_CtlError>
 80088ec:	e004      	b.n	80088f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa95 	bl	8008e1e <USBD_CtlSendStatus>
 80088f4:	e000      	b.n	80088f8 <USBD_GetDescriptor+0x320>
    return;
 80088f6:	bf00      	nop
  }
}
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop

08008900 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	889b      	ldrh	r3, [r3, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d131      	bne.n	8008976 <USBD_SetAddress+0x76>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d12d      	bne.n	8008976 <USBD_SetAddress+0x76>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	885b      	ldrh	r3, [r3, #2]
 800891e:	2b7f      	cmp	r3, #127	; 0x7f
 8008920:	d829      	bhi.n	8008976 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	885b      	ldrh	r3, [r3, #2]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d104      	bne.n	8008944 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f9a3 	bl	8008c88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008942:	e01d      	b.n	8008980 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7bfa      	ldrb	r2, [r7, #15]
 8008948:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fe7c 	bl	800964e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa61 	bl	8008e1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	e009      	b.n	8008980 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008974:	e004      	b.n	8008980 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f985 	bl	8008c88 <USBD_CtlError>
  }
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <USBD_SetConfig+0x148>)
 800899e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089a0:	4b4b      	ldr	r3, [pc, #300]	; (8008ad0 <USBD_SetConfig+0x148>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d905      	bls.n	80089b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f96c 	bl	8008c88 <USBD_CtlError>
    return USBD_FAIL;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e088      	b.n	8008ac6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d002      	beq.n	80089c6 <USBD_SetConfig+0x3e>
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d025      	beq.n	8008a10 <USBD_SetConfig+0x88>
 80089c4:	e071      	b.n	8008aaa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089c6:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <USBD_SetConfig+0x148>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d01c      	beq.n	8008a08 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089ce:	4b40      	ldr	r3, [pc, #256]	; (8008ad0 <USBD_SetConfig+0x148>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089d8:	4b3d      	ldr	r3, [pc, #244]	; (8008ad0 <USBD_SetConfig+0x148>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff f992 	bl	8007d08 <USBD_SetClassConfig>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f949 	bl	8008c88 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089f6:	e065      	b.n	8008ac4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa10 	bl	8008e1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2203      	movs	r2, #3
 8008a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a06:	e05d      	b.n	8008ac4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa08 	bl	8008e1e <USBD_CtlSendStatus>
      break;
 8008a0e:	e059      	b.n	8008ac4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a10:	4b2f      	ldr	r3, [pc, #188]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d112      	bne.n	8008a3e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a20:	4b2b      	ldr	r3, [pc, #172]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a2a:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff f985 	bl	8007d40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9f1 	bl	8008e1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a3c:	e042      	b.n	8008ac4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a3e:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d02a      	beq.n	8008aa2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff f973 	bl	8007d40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a64:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff f94c 	bl	8007d08 <USBD_SetClassConfig>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00f      	beq.n	8008a9a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f903 	bl	8008c88 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff f958 	bl	8007d40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a98:	e014      	b.n	8008ac4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9bf 	bl	8008e1e <USBD_CtlSendStatus>
      break;
 8008aa0:	e010      	b.n	8008ac4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9bb 	bl	8008e1e <USBD_CtlSendStatus>
      break;
 8008aa8:	e00c      	b.n	8008ac4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f8eb 	bl	8008c88 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <USBD_SetConfig+0x148>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff f941 	bl	8007d40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	bf00      	nop
  }

  return ret;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000514 	.word	0x20000514

08008ad4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d004      	beq.n	8008af0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f8cd 	bl	8008c88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008aee:	e023      	b.n	8008b38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	dc02      	bgt.n	8008b02 <USBD_GetConfig+0x2e>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dc03      	bgt.n	8008b08 <USBD_GetConfig+0x34>
 8008b00:	e015      	b.n	8008b2e <USBD_GetConfig+0x5a>
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d00b      	beq.n	8008b1e <USBD_GetConfig+0x4a>
 8008b06:	e012      	b.n	8008b2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3308      	adds	r3, #8
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f927 	bl	8008d6a <USBD_CtlSendData>
        break;
 8008b1c:	e00c      	b.n	8008b38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3304      	adds	r3, #4
 8008b22:	2201      	movs	r2, #1
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f91f 	bl	8008d6a <USBD_CtlSendData>
        break;
 8008b2c:	e004      	b.n	8008b38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f8a9 	bl	8008c88 <USBD_CtlError>
        break;
 8008b36:	bf00      	nop
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	3b01      	subs	r3, #1
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d81e      	bhi.n	8008b96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	88db      	ldrh	r3, [r3, #6]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d004      	beq.n	8008b6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f890 	bl	8008c88 <USBD_CtlError>
        break;
 8008b68:	e01a      	b.n	8008ba0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f043 0202 	orr.w	r2, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f8eb 	bl	8008d6a <USBD_CtlSendData>
      break;
 8008b94:	e004      	b.n	8008ba0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f875 	bl	8008c88 <USBD_CtlError>
      break;
 8008b9e:	bf00      	nop
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	885b      	ldrh	r3, [r3, #2]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d106      	bne.n	8008bc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f92b 	bl	8008e1e <USBD_CtlSendStatus>
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d80b      	bhi.n	8008c00 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10c      	bne.n	8008c0a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f910 	bl	8008e1e <USBD_CtlSendStatus>
      }
      break;
 8008bfe:	e004      	b.n	8008c0a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f840 	bl	8008c88 <USBD_CtlError>
      break;
 8008c08:	e000      	b.n	8008c0c <USBD_ClrFeature+0x3c>
      break;
 8008c0a:	bf00      	nop
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781a      	ldrb	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fa92 	bl	8008168 <SWAPBYTE>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fa85 	bl	8008168 <SWAPBYTE>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fa78 	bl	8008168 <SWAPBYTE>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	80da      	strh	r2, [r3, #6]
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c92:	2180      	movs	r1, #128	; 0x80
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc6f 	bl	8009578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fc6b 	bl	8009578 <USBD_LL_StallEP>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d036      	beq.n	8008d2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cc4:	6938      	ldr	r0, [r7, #16]
 8008cc6:	f000 f836 	bl	8008d36 <USBD_GetLen>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	3301      	adds	r3, #1
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	4413      	add	r3, r2
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cfa:	e013      	b.n	8008d24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
    idx++;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	3301      	adds	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	3301      	adds	r3, #1
 8008d22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e7      	bne.n	8008cfc <USBD_GetString+0x52>
 8008d2c:	e000      	b.n	8008d30 <USBD_GetString+0x86>
    return;
 8008d2e:	bf00      	nop
  }
}
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d46:	e005      	b.n	8008d54 <USBD_GetLen+0x1e>
  {
    len++;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1f5      	bne.n	8008d48 <USBD_GetLen+0x12>
  }

  return len;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fc7b 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	2100      	movs	r1, #0
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 fc6a 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2203      	movs	r2, #3
 8008dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	2100      	movs	r1, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 fc6e 	bl	80096ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fc5d 	bl	80096ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc29 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2205      	movs	r2, #5
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc37 	bl	80096ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008e70:	2200      	movs	r2, #0
 8008e72:	4912      	ldr	r1, [pc, #72]	; (8008ebc <MX_USB_Device_Init+0x50>)
 8008e74:	4812      	ldr	r0, [pc, #72]	; (8008ec0 <MX_USB_Device_Init+0x54>)
 8008e76:	f7fe fed9 	bl	8007c2c <USBD_Init>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008e80:	f7f7 fdfa 	bl	8000a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008e84:	490f      	ldr	r1, [pc, #60]	; (8008ec4 <MX_USB_Device_Init+0x58>)
 8008e86:	480e      	ldr	r0, [pc, #56]	; (8008ec0 <MX_USB_Device_Init+0x54>)
 8008e88:	f7fe ff00 	bl	8007c8c <USBD_RegisterClass>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008e92:	f7f7 fdf1 	bl	8000a78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008e96:	490c      	ldr	r1, [pc, #48]	; (8008ec8 <MX_USB_Device_Init+0x5c>)
 8008e98:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <MX_USB_Device_Init+0x54>)
 8008e9a:	f7fe fe51 	bl	8007b40 <USBD_CDC_RegisterInterface>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008ea4:	f7f7 fde8 	bl	8000a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <MX_USB_Device_Init+0x54>)
 8008eaa:	f7fe ff16 	bl	8007cda <USBD_Start>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008eb4:	f7f7 fde0 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008eb8:	bf00      	nop
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000130 	.word	0x20000130
 8008ec0:	20000518 	.word	0x20000518
 8008ec4:	20000018 	.word	0x20000018
 8008ec8:	2000011c 	.word	0x2000011c

08008ecc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4905      	ldr	r1, [pc, #20]	; (8008ee8 <CDC_Init_FS+0x1c>)
 8008ed4:	4805      	ldr	r0, [pc, #20]	; (8008eec <CDC_Init_FS+0x20>)
 8008ed6:	f7fe fe48 	bl	8007b6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008eda:	4905      	ldr	r1, [pc, #20]	; (8008ef0 <CDC_Init_FS+0x24>)
 8008edc:	4803      	ldr	r0, [pc, #12]	; (8008eec <CDC_Init_FS+0x20>)
 8008ede:	f7fe fe62 	bl	8007ba6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ee2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000fe8 	.word	0x20000fe8
 8008eec:	20000518 	.word	0x20000518
 8008ef0:	200007e8 	.word	0x200007e8

08008ef4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ef8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
 8008f10:	4613      	mov	r3, r2
 8008f12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b23      	cmp	r3, #35	; 0x23
 8008f18:	d84a      	bhi.n	8008fb0 <CDC_Control_FS+0xac>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <CDC_Control_FS+0x1c>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008fb1 	.word	0x08008fb1
 8008f24:	08008fb1 	.word	0x08008fb1
 8008f28:	08008fb1 	.word	0x08008fb1
 8008f2c:	08008fb1 	.word	0x08008fb1
 8008f30:	08008fb1 	.word	0x08008fb1
 8008f34:	08008fb1 	.word	0x08008fb1
 8008f38:	08008fb1 	.word	0x08008fb1
 8008f3c:	08008fb1 	.word	0x08008fb1
 8008f40:	08008fb1 	.word	0x08008fb1
 8008f44:	08008fb1 	.word	0x08008fb1
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008fb1 	.word	0x08008fb1
 8008f50:	08008fb1 	.word	0x08008fb1
 8008f54:	08008fb1 	.word	0x08008fb1
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008fb1 	.word	0x08008fb1
 8008f64:	08008fb1 	.word	0x08008fb1
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fb1 	.word	0x08008fb1
 8008f78:	08008fb1 	.word	0x08008fb1
 8008f7c:	08008fb1 	.word	0x08008fb1
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008fb1 	.word	0x08008fb1
 8008f88:	08008fb1 	.word	0x08008fb1
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fb1 	.word	0x08008fb1
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08008fb1 	.word	0x08008fb1
 8008fa8:	08008fb1 	.word	0x08008fb1
 8008fac:	08008fb1 	.word	0x08008fb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fb0:	bf00      	nop
  }

  return (USBD_OK);
 8008fb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <CDC_Receive_FS+0x24>)
 8008fce:	f7fe fdea 	bl	8007ba6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fd2:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <CDC_Receive_FS+0x24>)
 8008fd4:	f7fe fe00 	bl	8007bd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000518 	.word	0x20000518

08008fe8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2212      	movs	r2, #18
 800901c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000150 	.word	0x20000150

08009030 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2204      	movs	r2, #4
 8009040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	; (8009050 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000164 	.word	0x20000164

08009054 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d105      	bne.n	8009072 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4907      	ldr	r1, [pc, #28]	; (8009088 <USBD_CDC_ProductStrDescriptor+0x34>)
 800906a:	4808      	ldr	r0, [pc, #32]	; (800908c <USBD_CDC_ProductStrDescriptor+0x38>)
 800906c:	f7ff fe1d 	bl	8008caa <USBD_GetString>
 8009070:	e004      	b.n	800907c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4904      	ldr	r1, [pc, #16]	; (8009088 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009076:	4805      	ldr	r0, [pc, #20]	; (800908c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009078:	f7ff fe17 	bl	8008caa <USBD_GetString>
  }
  return USBD_StrDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200017e8 	.word	0x200017e8
 800908c:	080098a8 	.word	0x080098a8

08009090 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80090a0:	4804      	ldr	r0, [pc, #16]	; (80090b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80090a2:	f7ff fe02 	bl	8008caa <USBD_GetString>
  return USBD_StrDesc;
 80090a6:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200017e8 	.word	0x200017e8
 80090b4:	080098c0 	.word	0x080098c0

080090b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	221a      	movs	r2, #26
 80090c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090ca:	f000 f843 	bl	8009154 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80090ce:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000168 	.word	0x20000168

080090dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d105      	bne.n	80090fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4907      	ldr	r1, [pc, #28]	; (8009110 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80090f2:	4808      	ldr	r0, [pc, #32]	; (8009114 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80090f4:	f7ff fdd9 	bl	8008caa <USBD_GetString>
 80090f8:	e004      	b.n	8009104 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4904      	ldr	r1, [pc, #16]	; (8009110 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80090fe:	4805      	ldr	r0, [pc, #20]	; (8009114 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009100:	f7ff fdd3 	bl	8008caa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200017e8 	.word	0x200017e8
 8009114:	080098d4 	.word	0x080098d4

08009118 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4907      	ldr	r1, [pc, #28]	; (800914c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800912e:	4808      	ldr	r0, [pc, #32]	; (8009150 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009130:	f7ff fdbb 	bl	8008caa <USBD_GetString>
 8009134:	e004      	b.n	8009140 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4904      	ldr	r1, [pc, #16]	; (800914c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800913a:	4805      	ldr	r0, [pc, #20]	; (8009150 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800913c:	f7ff fdb5 	bl	8008caa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200017e8 	.word	0x200017e8
 8009150:	080098e0 	.word	0x080098e0

08009154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <Get_SerialNum+0x44>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009160:	4b0e      	ldr	r3, [pc, #56]	; (800919c <Get_SerialNum+0x48>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009166:	4b0e      	ldr	r3, [pc, #56]	; (80091a0 <Get_SerialNum+0x4c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800917a:	2208      	movs	r2, #8
 800917c:	4909      	ldr	r1, [pc, #36]	; (80091a4 <Get_SerialNum+0x50>)
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f814 	bl	80091ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009184:	2204      	movs	r2, #4
 8009186:	4908      	ldr	r1, [pc, #32]	; (80091a8 <Get_SerialNum+0x54>)
 8009188:	68b8      	ldr	r0, [r7, #8]
 800918a:	f000 f80f 	bl	80091ac <IntToUnicode>
  }
}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	1fff7590 	.word	0x1fff7590
 800919c:	1fff7594 	.word	0x1fff7594
 80091a0:	1fff7598 	.word	0x1fff7598
 80091a4:	2000016a 	.word	0x2000016a
 80091a8:	2000017a 	.word	0x2000017a

080091ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091be:	2300      	movs	r3, #0
 80091c0:	75fb      	strb	r3, [r7, #23]
 80091c2:	e027      	b.n	8009214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	0f1b      	lsrs	r3, r3, #28
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	d80b      	bhi.n	80091e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4619      	mov	r1, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	440b      	add	r3, r1
 80091dc:	3230      	adds	r2, #48	; 0x30
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e00a      	b.n	80091fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0f1b      	lsrs	r3, r3, #28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4619      	mov	r1, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	440b      	add	r3, r1
 80091f4:	3237      	adds	r2, #55	; 0x37
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	3301      	adds	r3, #1
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	4413      	add	r3, r2
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	3301      	adds	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	7dfa      	ldrb	r2, [r7, #23]
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	429a      	cmp	r2, r3
 800921a:	d3d3      	bcc.n	80091c4 <IntToUnicode+0x18>
  }
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b098      	sub	sp, #96	; 0x60
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009234:	f107 030c 	add.w	r3, r7, #12
 8009238:	2254      	movs	r2, #84	; 0x54
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fb1f 	bl	8009880 <memset>
  if(pcdHandle->Instance==USB)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a15      	ldr	r2, [pc, #84]	; (800929c <HAL_PCD_MspInit+0x70>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d123      	bne.n	8009294 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800924c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009250:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009256:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4618      	mov	r0, r3
 800925e:	f7fa fecb 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009268:	f7f7 fc06 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800926c:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <HAL_PCD_MspInit+0x74>)
 800926e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009270:	4a0b      	ldr	r2, [pc, #44]	; (80092a0 <HAL_PCD_MspInit+0x74>)
 8009272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009276:	6593      	str	r3, [r2, #88]	; 0x58
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <HAL_PCD_MspInit+0x74>)
 800927a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	2014      	movs	r0, #20
 800928a:	f7f8 f82c 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800928e:	2014      	movs	r0, #20
 8009290:	f7f8 f843 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009294:	bf00      	nop
 8009296:	3760      	adds	r7, #96	; 0x60
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40005c00 	.word	0x40005c00
 80092a0:	40021000 	.word	0x40021000

080092a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fd58 	bl	8007d70 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	00db      	lsls	r3, r3, #3
 80092e6:	440b      	add	r3, r1
 80092e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fe fd92 	bl	8007e1a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	440b      	add	r3, r1
 800931e:	333c      	adds	r3, #60	; 0x3c
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	4619      	mov	r1, r3
 8009326:	f7fe fddb 	bl	8007ee0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe feef 	bl	8008124 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d001      	beq.n	8009366 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009362:	f7f7 fb89 	bl	8000a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800936c:	7bfa      	ldrb	r2, [r7, #15]
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fe99 	bl	80080a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fe45 	bl	800800c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fe94 	bl	80080c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <HAL_PCD_SuspendCallback+0x30>)
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	4a03      	ldr	r2, [pc, #12]	; (80093bc <HAL_PCD_SuspendCallback+0x30>)
 80093ae:	f043 0306 	orr.w	r3, r3, #6
 80093b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	e000ed00 	.word	0xe000ed00

080093c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093d0:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <HAL_PCD_ResumeCallback+0x34>)
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	4a07      	ldr	r2, [pc, #28]	; (80093f4 <HAL_PCD_ResumeCallback+0x34>)
 80093d6:	f023 0306 	bic.w	r3, r3, #6
 80093da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80093dc:	f000 f9fa 	bl	80097d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fe84 	bl	80080f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009400:	4a2b      	ldr	r2, [pc, #172]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <USBD_LL_Init+0xb8>)
 800940c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009410:	4b27      	ldr	r3, [pc, #156]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009412:	4a28      	ldr	r2, [pc, #160]	; (80094b4 <USBD_LL_Init+0xbc>)
 8009414:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009416:	4b26      	ldr	r3, [pc, #152]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009418:	2208      	movs	r2, #8
 800941a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <USBD_LL_Init+0xb8>)
 800941e:	2202      	movs	r2, #2
 8009420:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009422:	4b23      	ldr	r3, [pc, #140]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009424:	2202      	movs	r2, #2
 8009426:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <USBD_LL_Init+0xb8>)
 800942a:	2200      	movs	r2, #0
 800942c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800942e:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009430:	2200      	movs	r2, #0
 8009432:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009434:	4b1e      	ldr	r3, [pc, #120]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009436:	2200      	movs	r2, #0
 8009438:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800943a:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <USBD_LL_Init+0xb8>)
 800943c:	2200      	movs	r2, #0
 800943e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009440:	481b      	ldr	r0, [pc, #108]	; (80094b0 <USBD_LL_Init+0xb8>)
 8009442:	f7f8 facd 	bl	80019e0 <HAL_PCD_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800944c:	f7f7 fb14 	bl	8000a78 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009456:	2318      	movs	r3, #24
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	f7f9 ff86 	bl	800336c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009466:	2358      	movs	r3, #88	; 0x58
 8009468:	2200      	movs	r2, #0
 800946a:	2180      	movs	r1, #128	; 0x80
 800946c:	f7f9 ff7e 	bl	800336c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009476:	23c0      	movs	r3, #192	; 0xc0
 8009478:	2200      	movs	r2, #0
 800947a:	2181      	movs	r1, #129	; 0x81
 800947c:	f7f9 ff76 	bl	800336c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009486:	f44f 7388 	mov.w	r3, #272	; 0x110
 800948a:	2200      	movs	r2, #0
 800948c:	2101      	movs	r1, #1
 800948e:	f7f9 ff6d 	bl	800336c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800949c:	2200      	movs	r2, #0
 800949e:	2182      	movs	r1, #130	; 0x82
 80094a0:	f7f9 ff64 	bl	800336c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200019e8 	.word	0x200019e8
 80094b4:	40005c00 	.word	0x40005c00

080094b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f8 fb6b 	bl	8001baa <HAL_PCD_Start>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f980 	bl	80097e0 <USBD_Get_USB_Status>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	70fb      	strb	r3, [r7, #3]
 8009500:	460b      	mov	r3, r1
 8009502:	70bb      	strb	r3, [r7, #2]
 8009504:	4613      	mov	r3, r2
 8009506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	883a      	ldrh	r2, [r7, #0]
 800951a:	78f9      	ldrb	r1, [r7, #3]
 800951c:	f7f8 fcb3 	bl	8001e86 <HAL_PCD_EP_Open>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f95a 	bl	80097e0 <USBD_Get_USB_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009530:	7bbb      	ldrb	r3, [r7, #14]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7f8 fcfa 	bl	8001f52 <HAL_PCD_EP_Close>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f93b 	bl	80097e0 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	f7f8 fdbb 	bl	8002112 <HAL_PCD_EP_SetStall>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f91c 	bl	80097e0 <USBD_Get_USB_Status>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7f8 fdee 	bl	80021b6 <HAL_PCD_EP_ClrStall>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f8fd 	bl	80097e0 <USBD_Get_USB_Status>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800960c:	2b00      	cmp	r3, #0
 800960e:	da0c      	bge.n	800962a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	440b      	add	r3, r1
 8009624:	3302      	adds	r3, #2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	e00b      	b.n	8009642 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	440b      	add	r3, r1
 800963c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009640:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7f8 fbe5 	bl	8001e3c <HAL_PCD_SetAddress>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f8b1 	bl	80097e0 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096aa:	7af9      	ldrb	r1, [r7, #11]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f7f8 fcec 	bl	800208c <HAL_PCD_EP_Transmit>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f890 	bl	80097e0 <USBD_Get_USB_Status>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b086      	sub	sp, #24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	460b      	mov	r3, r1
 80096dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ec:	7af9      	ldrb	r1, [r7, #11]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	f7f8 fc76 	bl	8001fe2 <HAL_PCD_EP_Receive>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f86f 	bl	80097e0 <USBD_Get_USB_Status>
 8009702:	4603      	mov	r3, r0
 8009704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009706:	7dbb      	ldrb	r3, [r7, #22]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7f8 fc98 	bl	800205c <HAL_PCD_EP_GetRxCount>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <HAL_PCDEx_LPM_Callback+0x18>
 800974a:	2b01      	cmp	r3, #1
 800974c:	d013      	beq.n	8009776 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800974e:	e023      	b.n	8009798 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009758:	f000 f83c 	bl	80097d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800975c:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	4a0f      	ldr	r2, [pc, #60]	; (80097a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009762:	f023 0306 	bic.w	r3, r3, #6
 8009766:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fcc0 	bl	80080f4 <USBD_LL_Resume>
    break;
 8009774:	e010      	b.n	8009798 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fca3 	bl	80080c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	4a04      	ldr	r2, [pc, #16]	; (80097a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009790:	f043 0306 	orr.w	r3, r3, #6
 8009794:	6113      	str	r3, [r2, #16]
    break;
 8009796:	bf00      	nop
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed00 	.word	0xe000ed00

080097a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <USBD_static_malloc+0x18>)
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20001cdc 	.word	0x20001cdc

080097c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]

}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80097d8:	f7f6 feb9 	bl	800054e <SystemClock_Config>
}
 80097dc:	bf00      	nop
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d817      	bhi.n	8009824 <USBD_Get_USB_Status+0x44>
 80097f4:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <USBD_Get_USB_Status+0x1c>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	0800980d 	.word	0x0800980d
 8009800:	08009813 	.word	0x08009813
 8009804:	08009819 	.word	0x08009819
 8009808:	0800981f 	.word	0x0800981f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
    break;
 8009810:	e00b      	b.n	800982a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009812:	2303      	movs	r3, #3
 8009814:	73fb      	strb	r3, [r7, #15]
    break;
 8009816:	e008      	b.n	800982a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
    break;
 800981c:	e005      	b.n	800982a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800981e:	2303      	movs	r3, #3
 8009820:	73fb      	strb	r3, [r7, #15]
    break;
 8009822:	e002      	b.n	800982a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	73fb      	strb	r3, [r7, #15]
    break;
 8009828:	bf00      	nop
  }
  return usb_status;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	; (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	; (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	; (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	; (800987c <__libc_init_array+0x44>)
 800984c:	f000 f820 	bl	8009890 <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	08009938 	.word	0x08009938
 8009874:	08009938 	.word	0x08009938
 8009878:	08009938 	.word	0x08009938
 800987c:	0800993c 	.word	0x0800993c

08009880 <memset>:
 8009880:	4402      	add	r2, r0
 8009882:	4603      	mov	r3, r0
 8009884:	4293      	cmp	r3, r2
 8009886:	d100      	bne.n	800988a <memset+0xa>
 8009888:	4770      	bx	lr
 800988a:	f803 1b01 	strb.w	r1, [r3], #1
 800988e:	e7f9      	b.n	8009884 <memset+0x4>

08009890 <_init>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr

0800989c <_fini>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr
